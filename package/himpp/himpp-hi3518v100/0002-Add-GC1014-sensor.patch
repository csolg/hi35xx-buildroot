diff -uNr a/component/isp2/sensor/galaxycore_gc1014/gc1014_cmos.c b/component/isp2/sensor/galaxycore_gc1014/gc1014_cmos.c
--- a/component/isp2/sensor/galaxycore_gc1014/gc1014_cmos.c	1970-01-01 08:00:00.000000000 +0800
+++ b/component/isp2/sensor/galaxycore_gc1014/gc1014_cmos.c	2016-03-10 16:05:27.876866084 +0800
@@ -0,0 +1,730 @@
+#if !defined(__GC1014_CMOS_H_)
+#define __GC1014_CMOS_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <assert.h>
+#include "hi_comm_sns.h"
+#include "hi_comm_isp.h"
+#include "hi_sns_ctrl.h"
+#include "mpi_isp.h"
+#include "mpi_ae.h"
+#include "mpi_awb.h"
+#include "mpi_af.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C"{
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#define GC1014_ID 1014
+
+/****************************************************************************
+ * local variables                                                            *
+ ****************************************************************************/
+
+extern const unsigned int sensor_i2c_addr;
+extern unsigned int sensor_addr_byte;
+extern unsigned int sensor_data_byte;
+
+HI_U8 gu8SensorMode = 0;
+
+static HI_U32 gu8Fps = 30;
+static HI_U32 gu32FullLinesStd = 858;
+static HI_U32 gu32FullLines = 858;
+
+
+ISP_SNS_REGS_INFO_S g_stSnsRegsInfo = { 0};
+
+
+static AWB_CCM_S g_stAwbCcm =
+{
+    4870,
+    {
+        0x1cb,0x8097,0x802d,
+        0x805c,0x1eb,0x8086,
+        0x801b,0x80d8,0x1fb
+    },
+    3927,
+    {
+        0x01e4,0x80a8,0x8035,
+        0x805a,0x018c,0x802e,
+        0x802e,0x8108,0x023d
+    },
+    2585,
+    {
+        0x023c,0x802d,0x810a,
+        0x8088,0x0282,0x80f3,
+        0x80e9,0x8207,0x3f7
+    }
+};
+
+static AWB_AGC_TABLE_S g_stAwbAgcTable =
+{
+    /* bvalid */
+    1,
+
+    /* saturation */
+    { 0x80,0x80,0x80,0x80,0x70,0x68,0x60,0x58 }
+};
+
+static ISP_CMOS_AGC_TABLE_S g_stIspAgcTable =
+{
+    /* bvalid */
+    1,
+
+    //sharpen_alt_d
+    { 0x50,0x4b,0x45,0x41,0x3b,0x38,0x34,0x30},
+
+    //sharpen_alt_ud
+    { 0x45,0x40,0x3b,0x35,0x30,0x28,0x25,0x25},
+
+    //snr_thresh
+    { 0x10,0x14,0x1a,0x23,0x38,0x40,0x48,0x50},
+
+
+    /* demosaic_lum_thresh */
+    { 0x50,0x50,0x40,0x40,0x30,0x30,0x20,0x20},
+
+    /* demosaic_np_offset */
+    { 0x0,0xa,0x12,0x1a,0x20,0x28,0x30,0x30},
+
+    /* ge_strength */
+    { 0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55}
+
+};
+
+static ISP_CMOS_NOISE_TABLE_S g_stIspNoiseTable =
+{
+    /* bvalid */
+    1,
+
+    /* nosie_profile_weight_lut */
+    {
+        0x00,0x04,0x10,0x16,0x1a,0x1d,0x1f,0x21,0x23,0x24,0x26,0x27,0x28,0x29,0x2a,0x2a,
+        0x2b,0x2c,0x2d,0x2d,0x2e,0x2e,0x2f,0x2f,0x30,0x30,0x31,0x31,0x32,0x32,0x33,0x33,
+        0x33,0x34,0x34,0x34,0x35,0x35,0x35,0x36,0x36,0x36,0x37,0x37,0x37,0x37,0x38,0x38,
+        0x38,0x38,0x39,0x39,0x39,0x39,0x39,0x3a,0x3a,0x3a,0x3a,0x3b,0x3b,0x3b,0x3b,0x3b,
+        0x3b,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3d,0x3d,0x3d,0x3d,0x3d,0x3d,0x3e,0x3e,0x3e,
+        0x3e,0x3e,0x3e,0x3e,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x40,0x40,0x40,0x40,0x40,
+        0x40,0x40,0x40,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x42,0x42,0x42,0x42,
+        0x42,0x42,0x42,0x42,0x42,0x42,0x43,0x43,0x43,0x43,0x43,0x43,0x43,0x43,0x43,0x43
+    },
+
+    /* demosaic_weight_lut */
+    {
+        0, 27, 31, 33, 35, 36, 37, 38, 39, 40, 40, 41, 41, 42, 42, 43,
+        43, 43, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47,
+        47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49,
+        49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51,
+        51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+        52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+        53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+        54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55
+    }
+};
+
+static ISP_CMOS_DEMOSAIC_S g_stIspDemosaic =
+{
+    /* bvalid */
+    1,
+
+    /*vh_slope*/
+    0xcd,
+
+    /*aa_slope*/
+    0xbf,
+
+    /*va_slope*/
+    0xc1,
+
+    /*uu_slope*/
+    0xa0,
+
+    /*sat_slope*/
+    0x5d,
+
+    /*ac_slope*/
+    0xcf,
+
+    /*vh_thresh*/
+    0x10,
+
+    /*aa_thresh*/
+    0x10,
+
+    /*va_thresh*/
+    0x10,
+
+    /*uu_thresh*/
+    0xa,
+
+    /*sat_thresh*/
+    0x171,
+
+    /*ac_thresh*/
+    0x1b3
+};
+
+static ISP_CMOS_SHADING_S g_stIspShading =
+{
+    /* bvalid */
+    1,
+
+    /*shading_center_r*/
+    0x28f, 0x16c,
+
+    /*shading_center_g*/
+    0x28e, 0x177,
+
+    /*shading_center_b*/
+    0x293, 0x16c,
+
+    /*shading_table_r*/
+    {
+        0x1000,0x1011,0x1033,0x1058,0x107d,0x10a1,0x10c5,0x10e8,0x110a,0x112b,0x114c,0x116c,
+	0x118b,0x11aa,0x11c8,0x11e5,0x1202,0x121e,0x1239,0x1254,0x126e,0x1288,0x12a1,0x12b9,
+	0x12d1,0x12e9,0x1300,0x1317,0x132e,0x1344,0x1359,0x136f,0x1384,0x1398,0x13ac,0x13c1,
+	0x13d4,0x13e8,0x13fb,0x140e,0x1421,0x1434,0x1446,0x1458,0x146b,0x147d,0x148f,0x14a0,
+	0x14b2,0x14c4,0x14d5,0x14e7,0x14f9,0x150a,0x151c,0x152d,0x153f,0x1551,0x1563,0x1575,
+	0x1587,0x1599,0x15ab,0x15bd,0x15d0,0x15e3,0x15f6,0x1609,0x161c,0x1630,0x1644,0x1658,
+	0x166c,0x1681,0x1696,0x16ac,0x16c2,0x16d8,0x16ee,0x1705,0x171d,0x1735,0x174d,0x1766,
+	0x1780,0x179a,0x17b4,0x17d0,0x17eb,0x1808,0x1825,0x1843,0x1861,0x1880,0x18a0,0x18c1,
+	0x18e3,0x1905,0x1929,0x194d,0x1972,0x1998,0x19c0,0x19e8,0x1a11,0x1a3c,0x1a68,0x1a95,
+	0x1ac3,0x1af3,0x1b24,0x1b56,0x1b8a,0x1bc0,0x1bf7,0x1c30,0x1c6b,0x1ca7,0x1ce6,0x1d26,
+        0x1d69,0x1dae,0x1df5,0x1e3e,0x1e8a,0x1ed8,0x1f2a,0x1f7e,0x1fd2
+    },
+
+    /*shading_table_g*/
+    {
+        0x1000,0x1045,0x1077,0x10a4,0x10ce,0x10f5,0x111b,0x113f,0x1162,0x1184,0x11a4,0x11c4,\
+	0x11e3,0x1201,0x121f,0x123c,0x1258,0x1273,0x128e,0x12a9,0x12c3,0x12dd,0x12f6,0x130f,\
+	0x1327,0x133f,0x1357,0x136e,0x1386,0x139d,0x13b3,0x13ca,0x13e0,0x13f6,0x140c,0x1422,\
+	0x1437,0x144d,0x1462,0x1478,0x148d,0x14a2,0x14b7,0x14cc,0x14e1,0x14f6,0x150b,0x1520,\
+	0x1535,0x154b,0x1560,0x1575,0x158b,0x15a0,0x15b6,0x15cb,0x15e1,0x15f7,0x160e,0x1624,\
+	0x163b,0x1652,0x1669,0x1680,0x1698,0x16af,0x16c8,0x16e0,0x16f9,0x1712,0x172b,0x1745,\
+	0x175f,0x177a,0x1795,0x17b1,0x17cd,0x17e9,0x1806,0x1823,0x1841,0x1860,0x187f,0x189e,\
+	0x18bf,0x18e0,0x1901,0x1923,0x1946,0x196a,0x198f,0x19b4,0x19da,0x1a01,0x1a29,0x1a51,\
+	0x1a7b,0x1aa5,0x1ad1,0x1afe,0x1b2b,0x1b5a,0x1b8a,0x1bbb,0x1bee,0x1c22,0x1c57,0x1c8d,\
+	0x1cc5,0x1cfe,0x1d39,0x1d76,0x1db4,0x1df4,0x1e36,0x1e7a,0x1ebf,0x1f07,0x1f51,0x1f9d,\
+	0x1fec,0x203d,0x2090,0x20e6,0x213f,0x219b,0x21f9,0x225b,0x22ae
+    },
+
+    /*shading_table_b*/
+    {
+        0x1000,0x102c,0x105b,0x1088,0x10b4,0x10de,0x1108,0x1130,0x1158,0x117e,0x11a4,0x11c9,\
+	0x11ee,0x1210,0x1234,0x1257,0x1279,0x129a,0x12bb,0x12db,0x12fb,0x131b,0x133a,0x1359,\
+	0x1377,0x1395,0x13b2,0x13cf,0x13ec,0x1409,0x1425,0x1441,0x145d,0x1478,0x1493,0x14ae,\
+	0x14c9,0x14e3,0x14fe,0x1518,0x1532,0x154c,0x1566,0x157f,0x1599,0x15b2,0x15cc,0x15e5,\
+	0x15fe,0x1618,0x1631,0x164a,0x1663,0x167c,0x1696,0x16af,0x16c8,0x16e2,0x16fb,0x1715,\
+	0x172d,0x1748,0x1762,0x177c,0x1797,0x17b0,0x17cc,0x17e6,0x1802,0x181e,0x1839,0x1855,\
+	0x1871,0x188d,0x18aa,0x18c8,0x18e6,0x1904,0x1922,0x1941,0x1960,0x1980,0x199f,0x19c1,\
+	0x19e2,0x1a04,0x1a26,0x1a48,0x1a6b,0x1a90,0x1ab5,0x1ada,0x1b01,0x1b28,0x1b50,0x1b77,\
+	0x1ba0,0x1bca,0x1bf7,0x1c22,0x1c4f,0x1c7d,0x1cac,0x1cdc,0x1d0d,0x1d3f,0x1d73,0x1da8,\
+	0x1dde,0x1e15,0x1e4d,0x1e88,0x1ec4,0x1f01,0x1f3f,0x1f80,0x1fc2,0x2006,0x204c,0x2094,\
+	0x20de,0x212a,0x2178,0x21c9,0x221c,0x2271,0x22ca,0x2325,0x236e
+    },
+
+    /*shading_off_center_r_g_b*/
+    0xe5e, 0xed0, 0xe59, //0xef0, 0xec3, 0xecd,
+
+    /*shading_table_nobe_number*/
+    129
+};
+
+static ISP_CMOS_GAMMA_S g_stIspGamma =
+{
+    /* bvalid */
+    1,
+
+    {
+        0,17,45,80,121,165,210,255,298,338,376,413,447,481,513,544,575,606,637,667,
+        697,727,757,786,816,845,874,902,931,959,987,1015,1043,1071,1098,1125,1152,1179,1206,1232,
+        1258,1284,1310,1336,1361,1387,1412,1437,1462,1486,1511,1535,1559,1583,1607,1630,1654,1677,1700,1723,
+        1745,1768,1790,1813,1835,1857,1878,1900,1921,1943,1964,1985,2005,2026,2047,2067,2087,2107,2127,2147,
+        2166,2186,2205,2224,2243,2262,2281,2300,2318,2336,2354,2372,2390,2408,2426,2443,2461,2478,2495,2512,
+        2529,2546,2562,2579,2595,2611,2627,2643,2659,2675,2690,2706,2721,2737,2752,2767,2782,2797,2811,2826,
+        2840,2855,2869,2883,2897,2911,2925,2939,2952,2966,2979,2993,3006,3019,3032,3045,3058,3071,3084,3096,
+        3109,3121,3133,3146,3158,3170,3182,3194,3206,3217,3229,3241,3252,3263,3275,3286,3297,3308,3319,3330,
+        3341,3352,3363,3374,3384,3395,3405,3416,3426,3437,3447,3457,3467,3477,3487,3497,3507,3517,3527,3536,
+        3546,3556,3565,3575,3584,3594,3603,3613,3622,3631,3640,3650,3659,3668,3677,3686,3695,3704,3713,3722,
+        3731,3740,3748,3757,3766,3775,3783,3792,3801,3809,3818,3826,3835,3843,3851,3860,3868,3876,3884,3892,
+        3900,3908,3915,3923,3931,3938,3945,3952,3960,3966,3973,3980,3987,3993,3999,4006,4012,4017,4023,4029,
+        4034,4039,4044,4049,4054,4058,4063,4067,4071,4074,4078,4081,4084,4087,4090,4092,4095
+    }
+};
+
+
+
+
+static HI_U32 Again_table[11]=
+{
+    1024,1680,1904,3296,3760,6368,7440,12400,18384,25440,37424
+};
+
+
+static HI_VOID cmos_again_calc_table(HI_U32 u32InTimes,AE_SENSOR_GAININFO_S *pstAeSnsGainInfo)
+{
+    int i;
+
+    if(HI_NULL == pstAeSnsGainInfo)
+    {
+        printf("null pointer when get ae sensor gain info  value!\n");
+        return;
+    }
+
+    pstAeSnsGainInfo->u32GainDb = 0;
+    pstAeSnsGainInfo->u32SnsTimes = 1024;
+
+    if (u32InTimes >= Again_table[10])
+    {
+         pstAeSnsGainInfo->u32SnsTimes = Again_table[10];
+         pstAeSnsGainInfo->u32GainDb = 10;
+         return ;
+    }
+
+    for(i = 1; i < 11; i++)
+    {
+        if(u32InTimes < Again_table[i])
+        {
+            pstAeSnsGainInfo->u32SnsTimes = Again_table[i - 1];
+            pstAeSnsGainInfo->u32GainDb = i - 1;
+            break;
+        }
+    }
+
+    return;
+
+}
+
+
+HI_U32 cmos_get_isp_default(ISP_CMOS_DEFAULT_S *pstDef)
+{
+    if (HI_NULL == pstDef)
+    {
+        printf("null pointer when get isp default value!\n");
+        return -1;
+    }
+
+    memset(pstDef, 0, sizeof(ISP_CMOS_DEFAULT_S));
+
+    pstDef->stComm.u8Rggb           = 0x3;      //3: bggr
+    pstDef->stComm.u8BalanceFe      = 0x1;
+
+    pstDef->stDenoise.u8SinterThresh= 0x15;
+    pstDef->stDenoise.u8NoiseProfile= 0x0;      //0: use default profile table; 1: use calibrated profile lut, the setting for nr0 and nr1 must be correct.
+    pstDef->stDenoise.u16Nr0        = 0x0;
+    pstDef->stDenoise.u16Nr1        = 0x0;
+
+    pstDef->stDrc.u8DrcBlack        = 0x00;
+    pstDef->stDrc.u8DrcVs           = 0x04;     // variance space
+    pstDef->stDrc.u8DrcVi           = 0x08;     // variance intensity
+    pstDef->stDrc.u8DrcSm           = 0xa0;     // slope max
+    pstDef->stDrc.u16DrcWl          = 0x4ff;    // white level
+
+    memcpy(&pstDef->stAgcTbl, &g_stIspAgcTable, sizeof(ISP_CMOS_AGC_TABLE_S));
+    memcpy(&pstDef->stNoiseTbl, &g_stIspNoiseTable, sizeof(ISP_CMOS_NOISE_TABLE_S));
+    memcpy(&pstDef->stDemosaic, &g_stIspDemosaic, sizeof(ISP_CMOS_DEMOSAIC_S));
+    memcpy(&pstDef->stShading, &g_stIspShading, sizeof(ISP_CMOS_SHADING_S));
+    memcpy(&pstDef->stGamma, &g_stIspGamma, sizeof(ISP_CMOS_GAMMA_S));
+
+    return 0;
+}
+
+HI_U32 cmos_get_isp_black_level(ISP_CMOS_BLACK_LEVEL_S *pstBlackLevel)
+{
+    if (HI_NULL == pstBlackLevel)
+    {
+        printf("null pointer when get isp black level value!\n");
+        return -1;
+    }
+
+    /* Don't need to update black level when iso change */
+    pstBlackLevel->bUpdate = HI_FALSE;
+
+    pstBlackLevel->au16BlackLevel[0] = 0;
+    pstBlackLevel->au16BlackLevel[1] = 0;
+    pstBlackLevel->au16BlackLevel[2] = 0;
+    pstBlackLevel->au16BlackLevel[3] = 0;
+
+    return 0;
+}
+
+HI_VOID cmos_set_pixel_detect(HI_BOOL bEnable)
+{
+
+    if (bEnable) /* setup for ISP pixel calibration mode */
+    {
+        /* 5 fps */			// 5240line per frame; VB = 5240 - 720 = 4520
+        sensor_write_register(0x07, 0x11); 		// vb[12:8]
+        sensor_write_register(0x08, 0xa8); 		// vb[7:0]
+
+        /* min gain */
+        sensor_write_register(0xb1, 0x01);		//pre-gain[9:6]
+        sensor_write_register(0xb2, 0x00);		//pre-gain[5:0]
+
+        sensor_write_register(0xb6, 0x00);       	//analog gain
+
+       // Global digital gain: default is 1.25x
+
+        /* max exposure time*/		//total 5240 lines;   max exposure line = 5240 -4
+        sensor_write_register(0x03, 0x14);			//exp_time[12:8]
+        sensor_write_register(0x04, 0x74);			//exp_time[7:0]
+    }
+    else /* setup for ISP 'normal mode' */		//30fps
+    {
+        sensor_write_register(0x07, 0x00);
+        sensor_write_register(0x08, 0x82);
+    }
+
+    return;
+}
+
+HI_VOID cmos_set_wdr_mode(HI_U8 u8Mode)
+{
+    switch(u8Mode)
+    {
+        //sensor mode 0
+        case 0:
+            gu8SensorMode = 0;
+        break;
+        //sensor mode 1
+        case 1:
+            gu8SensorMode = 1;
+        break;
+
+        default:
+            printf("NOT support this mode!\n");
+            return;
+        break;
+    }
+
+    return;
+}
+
+static HI_S32 cmos_get_ae_default(AE_SENSOR_DEFAULT_S *pstAeSnsDft)
+{
+    if (HI_NULL == pstAeSnsDft)
+    {
+        printf("null pointer when get ae default value!\n");
+        return -1;
+    }
+
+    pstAeSnsDft->u32LinesPer500ms = 770*30/2;
+    pstAeSnsDft->u32FlickerFreq = 0;//60*256;//50*256;
+
+    gu32FullLinesStd = 770;
+
+    pstAeSnsDft->stIntTimeAccu.enAccuType = AE_ACCURACY_LINEAR;
+    pstAeSnsDft->stIntTimeAccu.f32Accuracy = 1;
+    pstAeSnsDft->u32MaxIntTime = 754;
+    pstAeSnsDft->u32MinIntTime = 2;
+
+    pstAeSnsDft->au8HistThresh[0] = 0xd;
+    pstAeSnsDft->au8HistThresh[1] = 0x28;
+    pstAeSnsDft->au8HistThresh[2] = 0x60;
+    pstAeSnsDft->au8HistThresh[3] = 0x80;
+
+    pstAeSnsDft->u8AeCompensation = 0x40;
+
+    pstAeSnsDft->u32MaxIntTimeTarget = 8191; 		//max exposure time in sensor
+    pstAeSnsDft->u32MinIntTimeTarget = 2;
+
+    pstAeSnsDft->stAgainAccu.enAccuType = AE_ACCURACY_TABLE;		//gain x
+    pstAeSnsDft->stAgainAccu.f32Accuracy = 0.01;
+    pstAeSnsDft->u32MaxAgain = 13517;  /* 1, 2, 4, ... 16 (0~24db, unit is 6db) */
+    pstAeSnsDft->u32MinAgain = 1024;
+    pstAeSnsDft->u32MaxAgainTarget = 13517;
+    pstAeSnsDft->u32MinAgainTarget = 1024;
+
+
+    pstAeSnsDft->stDgainAccu.enAccuType = AE_ACCURACY_LINEAR;
+    pstAeSnsDft->stDgainAccu.f32Accuracy = 0.015625;
+    pstAeSnsDft->u32MaxDgain = 1023;  // 1.5x
+    pstAeSnsDft->u32MinDgain = 64;
+    pstAeSnsDft->u32MaxDgainTarget = 1023;
+    pstAeSnsDft->u32MinDgainTarget = 64;
+
+    pstAeSnsDft->u32ISPDgainShift = 8;
+    pstAeSnsDft->u32MaxISPDgainTarget = 4 << pstAeSnsDft->u32ISPDgainShift;
+    pstAeSnsDft->u32MinISPDgainTarget = 1 << pstAeSnsDft->u32ISPDgainShift;
+
+    return 0;
+}
+
+/* the function of sensor set fps */
+static HI_VOID cmos_fps_set(HI_U8 u8Fps, AE_SENSOR_DEFAULT_S *pstAeSnsDft)
+{
+    switch(u8Fps)
+    {
+	case 30:
+	    pstAeSnsDft->u32MaxIntTime = 754;
+	    gu32FullLinesStd = 770;
+	    gu8Fps = u8Fps;
+	    pstAeSnsDft->u32LinesPer500ms = gu32FullLinesStd * u8Fps / 2;
+        sensor_write_register(0x08, 0x0c);
+	    break;
+	case 25:
+	    pstAeSnsDft->u32MaxIntTime = 908;
+	    gu32FullLinesStd = 924;
+	    gu8Fps = u8Fps;
+	    pstAeSnsDft->u32LinesPer500ms = gu32FullLinesStd * u8Fps / 2;
+        sensor_write_register(0x08, 0xa6);
+	    break;
+	default:
+		break;
+	}
+
+    return;
+}
+
+static HI_VOID cmos_slow_framerate_set(HI_U16 u16FullLines,
+    AE_SENSOR_DEFAULT_S *pstAeSnsDft)
+{
+    HI_U32 u32VblankingLines;
+
+    gu32FullLines = u16FullLines;
+    u32VblankingLines = gu32FullLines - 758;
+
+    sensor_write_register(0x08, u32VblankingLines & 0xff);      // VB[7:0]
+    sensor_write_register(0x07, (u32VblankingLines & 0x1f00) >> 8);
+
+
+    pstAeSnsDft->u32MaxIntTime = gu32FullLines - 16;
+
+    return;
+}
+
+static HI_VOID cmos_init_regs_info(HI_VOID)
+{
+
+    HI_S32 i;
+    static HI_BOOL bInit = HI_FALSE;
+
+    if (HI_FALSE == bInit)
+    {
+        g_stSnsRegsInfo.enSnsType = ISP_SNS_I2C_TYPE;
+        g_stSnsRegsInfo.u32RegNum = 5;
+        for (i=0; i<5; i++)
+        {
+            g_stSnsRegsInfo.astI2cData[i].u8DevAddr = sensor_i2c_addr;
+            g_stSnsRegsInfo.astI2cData[i].u32AddrByteNum = sensor_addr_byte;
+            g_stSnsRegsInfo.astI2cData[i].u32DataByteNum = sensor_data_byte;
+        }
+
+        g_stSnsRegsInfo.astI2cData[0].bDelayCfg = HI_FALSE;
+        g_stSnsRegsInfo.astI2cData[0].u32RegAddr = 0x03;	//exp_time[12:8]
+        g_stSnsRegsInfo.astI2cData[1].bDelayCfg = HI_FALSE;
+        g_stSnsRegsInfo.astI2cData[1].u32RegAddr = 0x04;	//exp_time[7:0]
+        g_stSnsRegsInfo.astI2cData[2].bDelayCfg = HI_FALSE;
+        g_stSnsRegsInfo.astI2cData[2].u32RegAddr = 0xb6;	//Again
+        g_stSnsRegsInfo.astI2cData[3].bDelayCfg = HI_FALSE;
+        g_stSnsRegsInfo.astI2cData[3].u32RegAddr = 0xb1;	//Pre-gain1  [9:6]
+        g_stSnsRegsInfo.astI2cData[4].bDelayCfg = HI_FALSE;
+        g_stSnsRegsInfo.astI2cData[4].u32RegAddr = 0xb2;	//pre-gain2  [5:0]
+
+        g_stSnsRegsInfo.bDelayCfgIspDgain = HI_TRUE;
+
+        bInit = HI_TRUE;
+    }
+
+    return;
+}
+
+/* while isp notify ae to update sensor regs, ae call these funcs. */
+static HI_VOID cmos_inttime_update(HI_U32 u32IntTime)
+{
+    cmos_init_regs_info();
+    g_stSnsRegsInfo.astI2cData[1].u32Data = u32IntTime & 0xFF;
+    g_stSnsRegsInfo.astI2cData[0].u32Data = (u32IntTime >> 8) & 0x1F;
+
+    return;
+}
+
+static HI_VOID cmos_gains_update(HI_U32 u32Again, HI_U32 u32Dgain)
+{
+    HI_U8 u8High, u8Low;
+
+
+    u8High = (u32Dgain >>6) & 0x0f;
+    u8Low = (u32Dgain & 0x3f)<<2;
+
+
+    cmos_init_regs_info();
+    g_stSnsRegsInfo.astI2cData[2].u32Data = u32Again;
+
+    g_stSnsRegsInfo.astI2cData[3].u32Data = u8High;
+    g_stSnsRegsInfo.astI2cData[4].u32Data = u8Low;
+
+    HI_MPI_ISP_SnsRegsCfg(&g_stSnsRegsInfo);
+
+    return;
+}
+
+static HI_S32 cmos_get_awb_default(AWB_SENSOR_DEFAULT_S *pstAwbSnsDft)
+{
+    if (HI_NULL == pstAwbSnsDft)
+    {
+        printf("null pointer when get awb default value!\n");
+        return -1;
+    }
+
+    memset(pstAwbSnsDft, 0, sizeof(AWB_SENSOR_DEFAULT_S));
+
+    pstAwbSnsDft->u16WbRefTemp = 4870;
+
+    pstAwbSnsDft->au16GainOffset[0] = 0x13e;
+    pstAwbSnsDft->au16GainOffset[1] = 0x100;
+    pstAwbSnsDft->au16GainOffset[2] = 0x100;
+    pstAwbSnsDft->au16GainOffset[3] = 0x131;
+
+    pstAwbSnsDft->as32WbPara[0] = 3;
+    pstAwbSnsDft->as32WbPara[1] = 353;
+    pstAwbSnsDft->as32WbPara[2] = 98;
+    pstAwbSnsDft->as32WbPara[3] = 163818;
+    pstAwbSnsDft->as32WbPara[4] = 128;
+    pstAwbSnsDft->as32WbPara[5] = -113853;
+
+    memcpy(&pstAwbSnsDft->stCcm, &g_stAwbCcm, sizeof(AWB_CCM_S));
+    memcpy(&pstAwbSnsDft->stAgcTbl, &g_stAwbAgcTable, sizeof(AWB_AGC_TABLE_S));
+
+    return 0;
+}
+
+static HI_S32 cmos_get_sensor_max_resolution(ISP_CMOS_SENSOR_MAX_RESOLUTION *pstSensorMaxResolution)
+{
+    if (HI_NULL == pstSensorMaxResolution)
+    {
+        printf("null pointer when get sensor max resolution\n");
+        return -1;
+    }
+
+    memset(pstSensorMaxResolution, 0, sizeof(ISP_CMOS_SENSOR_MAX_RESOLUTION));
+
+    pstSensorMaxResolution->u32MaxWidth = 1280;
+    pstSensorMaxResolution->u32MaxHeight = 720;
+
+    return 0;
+}
+
+/****************************************************************************
+ * callback structure                                                       *
+ ****************************************************************************/
+HI_S32 cmos_init_sensor_exp_function(ISP_SENSOR_EXP_FUNC_S *pstSensorExpFunc)
+{
+    memset(pstSensorExpFunc, 0, sizeof(ISP_SENSOR_EXP_FUNC_S));
+
+    pstSensorExpFunc->pfn_cmos_sensor_init = sensor_init;
+    pstSensorExpFunc->pfn_cmos_get_isp_default = cmos_get_isp_default;
+    pstSensorExpFunc->pfn_cmos_get_isp_black_level = cmos_get_isp_black_level;
+    pstSensorExpFunc->pfn_cmos_set_pixel_detect = cmos_set_pixel_detect;
+    pstSensorExpFunc->pfn_cmos_set_wdr_mode = cmos_set_wdr_mode;
+    pstSensorExpFunc->pfn_cmos_get_sensor_max_resolution = cmos_get_sensor_max_resolution;
+
+    return 0;
+}
+
+HI_S32 cmos_init_ae_exp_function(AE_SENSOR_EXP_FUNC_S *pstExpFuncs)
+{
+    memset(pstExpFuncs, 0, sizeof(AE_SENSOR_EXP_FUNC_S));
+
+    pstExpFuncs->pfn_cmos_get_ae_default    = cmos_get_ae_default;
+    pstExpFuncs->pfn_cmos_fps_set           = cmos_fps_set;
+    pstExpFuncs->pfn_cmos_slow_framerate_set= cmos_slow_framerate_set;
+    pstExpFuncs->pfn_cmos_inttime_update    = cmos_inttime_update;
+    pstExpFuncs->pfn_cmos_gains_update      = cmos_gains_update;
+    pstExpFuncs->pfn_cmos_again_calc_table  = cmos_again_calc_table;
+
+    return 0;
+}
+
+HI_S32 cmos_init_awb_exp_function(AWB_SENSOR_EXP_FUNC_S *pstExpFuncs)
+{
+    memset(pstExpFuncs, 0, sizeof(AWB_SENSOR_EXP_FUNC_S));
+
+    pstExpFuncs->pfn_cmos_get_awb_default = cmos_get_awb_default;
+
+    return 0;
+}
+
+int sensor_register_callback(void)
+{
+    HI_S32 s32Ret;
+    ALG_LIB_S stLib;
+    ISP_SENSOR_REGISTER_S stIspRegister;
+    AE_SENSOR_REGISTER_S  stAeRegister;
+    AWB_SENSOR_REGISTER_S stAwbRegister;
+
+    cmos_init_sensor_exp_function(&stIspRegister.stSnsExp);
+    s32Ret = HI_MPI_ISP_SensorRegCallBack(GC1014_ID, &stIspRegister);
+    if (s32Ret)
+    {
+        printf("sensor register callback function failed!\n");
+        return s32Ret;
+    }
+
+    stLib.s32Id = 0;
+    strcpy(stLib.acLibName, HI_AE_LIB_NAME);
+    cmos_init_ae_exp_function(&stAeRegister.stSnsExp);
+    s32Ret = HI_MPI_AE_SensorRegCallBack(&stLib, GC1014_ID, &stAeRegister);
+    if (s32Ret)
+    {
+        printf("sensor register callback function to ae lib failed!\n");
+        return s32Ret;
+    }
+
+    stLib.s32Id = 0;
+    strcpy(stLib.acLibName, HI_AWB_LIB_NAME);
+    cmos_init_awb_exp_function(&stAwbRegister.stSnsExp);
+    s32Ret = HI_MPI_AWB_SensorRegCallBack(&stLib, GC1014_ID, &stAwbRegister);
+    if (s32Ret)
+    {
+        printf("sensor register callback function to ae lib failed!\n");
+        return s32Ret;
+    }
+
+    return 0;
+}
+
+int sensor_unregister_callback(void)
+{
+    HI_S32 s32Ret;
+    ALG_LIB_S stLib;
+
+    s32Ret = HI_MPI_ISP_SensorUnRegCallBack(GC1014_ID);
+    if (s32Ret)
+    {
+        printf("sensor unregister callback function failed!\n");
+        return s32Ret;
+    }
+
+    stLib.s32Id = 0;
+    strcpy(stLib.acLibName, HI_AE_LIB_NAME);
+    s32Ret = HI_MPI_AE_SensorUnRegCallBack(&stLib, GC1014_ID);
+    if (s32Ret)
+    {
+        printf("sensor unregister callback function to ae lib failed!\n");
+        return s32Ret;
+    }
+
+    stLib.s32Id = 0;
+    strcpy(stLib.acLibName, HI_AWB_LIB_NAME);
+    s32Ret = HI_MPI_AWB_SensorUnRegCallBack(&stLib, GC1014_ID);
+    if (s32Ret)
+    {
+        printf("sensor unregister callback function to ae lib failed!\n");
+        return s32Ret;
+    }
+
+    return 0;
+}
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+
+#endif // __GC1014_CMOS_H_
diff -uNr a/component/isp2/sensor/galaxycore_gc1014/gc1014_sensor_ctl.c b/component/isp2/sensor/galaxycore_gc1014/gc1014_sensor_ctl.c
--- a/component/isp2/sensor/galaxycore_gc1014/gc1014_sensor_ctl.c	1970-01-01 08:00:00.000000000 +0800
+++ b/component/isp2/sensor/galaxycore_gc1014/gc1014_sensor_ctl.c	2016-02-29 14:36:49.199575944 +0800
@@ -0,0 +1,370 @@
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/ioctl.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#ifdef HI_GPIO_I2C
+#include "gpioi2c_ov.h"
+#include "gpio_i2c.h"
+#else
+#include "hi_i2c.h"
+#endif
+
+const unsigned int sensor_i2c_addr	= 0x78;		/* I2C Address of gc1014*/
+const unsigned int sensor_addr_byte	= 1;
+const unsigned int sensor_data_byte	= 1;
+
+
+int sensor_read_register(int addr)
+{
+#ifdef HI_GPIO_I2C
+	int fd = -1;
+	int ret;
+	int value;
+
+	fd = open("/dev/gpioi2c_ov", 0);
+	if(fd<0)
+	{
+		printf("Open gpioi2c_ov error!\n");
+		return -1;
+	}
+
+	value = ((sensor_i2c_addr&0xff)<<24) | ((addr&0xff)<<16);
+
+	ret = ioctl(fd, GPIO_I2C_READ, &value);
+	if (ret)
+	{
+		printf("GPIO-I2C read faild!\n");
+		close(fd);
+		return -1;
+	}
+
+	value &= 0xff;
+
+	close(fd);
+	return value;
+#else
+	int fd = -1;
+	int ret;
+	I2C_DATA_S i2c_data;
+
+	fd = open("/dev/hi_i2c", 0);
+	if(fd<0)
+	{
+		printf("Open hi_i2c error!\n");
+		return -1;
+	}
+
+	i2c_data.dev_addr = sensor_i2c_addr;
+	i2c_data.reg_addr = addr;
+	i2c_data.addr_byte_num = sensor_addr_byte;
+	i2c_data.data_byte_num = sensor_data_byte;
+
+	ret = ioctl(fd, CMD_I2C_WRITE, &i2c_data);
+
+	if (ret)
+	{
+		printf("hi_i2c write faild!\n");
+		close(fd);
+		return -1;
+	}
+
+	close(fd);
+#endif
+
+	return i2c_data.data;
+}
+
+int sensor_write_register(int addr, int data)
+{
+#ifdef HI_GPIO_I2C
+	int fd = -1;
+	int ret;
+	int value;
+
+	fd = open("/dev/gpioi2c_ov", 0);
+	if(fd<0)
+	{
+		printf("Open gpioi2c_ov error!\n");
+		return -1;
+	}
+
+	value = ((sensor_i2c_addr&0xff)<<24) | ((addr&0xff)<<16) | (data&0xff);
+
+	ret = ioctl(fd, GPIO_I2C_WRITE, &value);
+
+	if (ret)
+	{
+		printf("GPIO-I2C write faild!\n");
+		close(fd);
+		return -1;
+	}
+
+	close(fd);
+#else
+	int fd = -1;
+	int ret;
+	I2C_DATA_S i2c_data;
+
+	fd = open("/dev/hi_i2c", 0);
+	if(fd<0)
+	{
+		printf("Open hi_i2c error!\n");
+		return -1;
+	}
+
+	i2c_data.dev_addr = sensor_i2c_addr;
+	i2c_data.reg_addr = addr;
+	i2c_data.addr_byte_num = sensor_addr_byte;
+	i2c_data.data = data;
+	i2c_data.data_byte_num = sensor_data_byte;
+
+	ret = ioctl(fd, CMD_I2C_WRITE, &i2c_data);
+
+	if (ret)
+	{
+		printf("hi_i2c write faild!\n");
+		close(fd);
+		return -1;
+	}
+
+	close(fd);
+#endif
+	return 0;
+}
+
+int sensor_write_register_bit(int addr, int data, int mask)
+{
+#ifdef HI_GPIO_I2C
+	int fd = -1;
+	int ret;
+	int value;
+
+	fd = open("/dev/gpioi2c_ov", 0);
+	if(fd<0)
+	{
+		printf("Open gpioi2c_ov error!\n");
+		return -1;
+	}
+
+	value = ((sensor_i2c_addr&0xff)<<24) | ((addr&0xff)<<16);
+
+	ret = ioctl(fd, GPIO_I2C_READ, &value);
+	if (ret)
+	{
+		printf("GPIO-I2C read faild!\n");
+		close(fd);
+		return -1;
+	}
+
+	value &= 0xff;
+	value &= ~mask;
+	value |= data & mask;
+
+	value = ((sensor_i2c_addr&0xff)<<24) | ((addr&0xff)<<16) | (value&0xff);
+
+	ret = ioctl(fd, GPIO_I2C_WRITE, &value);
+	if (ret)
+	{
+		printf("GPIO-I2C write faild!\n");
+		close(fd);
+		return -1;
+	}
+
+	close(fd);
+#else
+	int fd = -1;
+	int ret;
+	int value;
+	I2C_DATA_S i2c_data;
+
+	fd = open("/dev/hi_i2c", 0);
+	if(fd<0)
+	{
+		printf("Open hi_i2c error!\n");
+		return -1;
+	}
+
+	i2c_data.dev_addr = sensor_i2c_addr;
+	i2c_data.reg_addr = addr;
+	i2c_data.addr_byte_num = sensor_addr_byte;
+	i2c_data.data_byte_num = sensor_data_byte;
+
+	ret = ioctl(fd, CMD_I2C_READ, &i2c_data);
+	if (ret)
+	{
+		printf("hi_i2c read faild!\n");
+		close(fd);
+		return -1;
+	}
+
+	value = i2c_data.data;
+	value &= ~mask;
+	value |= data & mask;
+
+	i2c_data.data = value;
+
+	ret = ioctl(fd, CMD_I2C_WRITE, &i2c_data);
+	if (ret)
+	{
+		printf("hi_i2c write faild!\n");
+		close(fd);
+		return -1;
+	}
+
+	close(fd);
+#endif
+	return 0;
+}
+
+
+static void delay_ms(int ms)
+{
+	usleep(ms*1000);
+}
+
+void sensor_prog(int* rom)
+{
+	int i = 0;
+	while (1)
+	{
+		int u32Lookup = rom[i++];
+		int addr = (u32Lookup >> 16) & 0xFFFF;
+		int data = u32Lookup & 0xFFFF;
+		if (addr == 0xFFFE)
+		{
+			delay_ms(data);
+		}
+		else if (addr == 0xFFFF)
+		{
+			return;
+		}
+		else
+		{
+			sensor_write_register(addr, data);
+		}
+	}
+}
+
+void sensor_init()
+{
+	//SYS
+	sensor_write_register(0xfe,0x80);
+	sensor_write_register(0xfe,0x80);
+	sensor_write_register(0xfe,0x80);
+	sensor_write_register(0xf2,0x02);
+	sensor_write_register(0xf6,0x00);
+	sensor_write_register(0xfc,0xc6);
+	sensor_write_register(0xf7,0xb9);
+	sensor_write_register(0xf8,0x03);
+	sensor_write_register(0xf9,0x0e);
+	sensor_write_register(0xfa,0x00);
+	sensor_write_register(0xfe,0x00);
+
+	//ANALOG & CISCTL
+	sensor_write_register(0x03,0x02);
+	sensor_write_register(0x04,0xfa);
+	sensor_write_register(0x05,0x01);
+	sensor_write_register(0x06,0x77);
+	sensor_write_register(0x07,0x00);
+	sensor_write_register(0x08,0x0c);
+	sensor_write_register(0x0d,0x02);
+	sensor_write_register(0x0e,0xe6);
+	sensor_write_register(0x0f,0x05);
+	sensor_write_register(0x10,0x10);
+	sensor_write_register(0x11,0x00);
+	sensor_write_register(0x12,0x18);
+	sensor_write_register(0x17,0x14);
+	sensor_write_register(0x19,0x06);
+	sensor_write_register(0x1b,0x4f);
+	sensor_write_register(0x1c,0x41);
+	sensor_write_register(0x1d,0xe0);
+	sensor_write_register(0x1e,0xfc);
+	sensor_write_register(0x1f,0x38);
+	sensor_write_register(0x20,0x81);
+	sensor_write_register(0x21,0x2f);//6f//2f
+	sensor_write_register(0x22,0xc2);
+	sensor_write_register(0x23,0xf2);
+	sensor_write_register(0x24,0x2f);
+	sensor_write_register(0x25,0xd4);
+	sensor_write_register(0x26,0xa8);
+	sensor_write_register(0x29,0x3f);//54//3f
+	sensor_write_register(0x2a,0x00);
+	sensor_write_register(0x2c,0xd0);//DC--30fps   d0---50fps
+	sensor_write_register(0x2d,0x0f);
+	sensor_write_register(0x2e,0x00);
+	sensor_write_register(0x2f,0x1f);
+	sensor_write_register(0xcc,0x25);
+	sensor_write_register(0xce,0xf3);
+	sensor_write_register(0x3f,0x08);
+	sensor_write_register(0x30,0x00);
+	sensor_write_register(0x31,0x01);
+	sensor_write_register(0x32,0x02);
+	sensor_write_register(0x33,0x03);
+	sensor_write_register(0x34,0x04);
+	sensor_write_register(0x35,0x05);
+	sensor_write_register(0x36,0x06);
+	sensor_write_register(0x37,0x07);
+	sensor_write_register(0x38,0x0f);
+	sensor_write_register(0x39,0x17);
+	sensor_write_register(0x3a,0x1f);
+	sensor_write_register(0x3f,0x18);
+
+	//ISP
+	sensor_write_register(0xfe,0x00);
+	sensor_write_register(0x8a,0x00);
+	sensor_write_register(0x8c,0x02);
+	sensor_write_register(0x8e,0x02);
+	sensor_write_register(0x8f,0x15);
+	sensor_write_register(0x90,0x01);
+	sensor_write_register(0x94,0x02);
+	sensor_write_register(0x95,0x02);
+	sensor_write_register(0x96,0xd0);
+	sensor_write_register(0x97,0x05);
+	sensor_write_register(0x98,0x00);
+
+	//MIPI
+	sensor_write_register(0xfe,0x03);
+	sensor_write_register(0x01,0x00);
+	sensor_write_register(0x02,0x00);
+	sensor_write_register(0x03,0x00);
+	sensor_write_register(0x06,0x00);
+	sensor_write_register(0x10,0x00);
+	sensor_write_register(0x15,0x00);
+	/////////////////////////////////////////////////////
+	//////////////////////	 BLK	/////////////////////
+	/////////////////////////////////////////////////////
+	sensor_write_register(0xfe,0x00);
+	sensor_write_register(0x18,0x0a);
+	sensor_write_register(0x1a,0x11);
+	sensor_write_register(0x40,0x2b);//0x2b
+	sensor_write_register(0x5e,0x00);
+	sensor_write_register(0x66,0x80);
+	/////////////////////////////////////////////////////
+	////////////////////// Dark SUN /////////////////////
+	/////////////////////////////////////////////////////
+	sensor_write_register(0xfe,0x00);
+	sensor_write_register(0xcc,0x25);
+	sensor_write_register(0xce,0xf3);
+
+	/////////////////////////////////////////////////////
+	//////////////////////	 Gain	/////////////////////
+	/////////////////////////////////////////////////////
+	sensor_write_register(0xfe,0x00);
+	sensor_write_register(0xb0,0x50);
+	sensor_write_register(0xb3,0x40);
+	sensor_write_register(0xb4,0x40);
+	sensor_write_register(0xb5,0x40);
+	sensor_write_register(0xb6,0x00);
+	/////////////////////////////////////////////////////
+	//////////////////////   pad enable   ///////////////
+	/////////////////////////////////////////////////////
+	sensor_write_register(0xf2,0x0f);
+	sensor_write_register(0xfe,0x00);
+
+	printf("GalaxyCore GC1014 sensor 720p 30fps init success!\n");
+	return ;
+}
+
diff -uNr a/component/isp2/sensor/galaxycore_gc1014/Makefile b/component/isp2/sensor/galaxycore_gc1014/Makefile
--- a/component/isp2/sensor/galaxycore_gc1014/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/component/isp2/sensor/galaxycore_gc1014/Makefile	2016-02-29 14:36:49.199575944 +0800
@@ -0,0 +1,66 @@
+#
+# sensor lib Makefile
+#
+
+ifeq ($(PARAM_FILE), )
+	PARAM_FILE:=../../../../Makefile.param
+	include $(PARAM_FILE)
+endif
+
+ISP_PATH := $(MPP_PATH)/component/isp2
+EXT_PATH := $(MPP_PATH)/$(EXTDRV)
+3A_PATH  := $(ISP_PATH)/3a
+LIBPATH = $(ISP_PATH)/lib
+OBJPATH = ./obj
+
+ifeq ($(CONFIG_GPIO_I2C),Y)
+HI_GPIO_I2C:=HI_GPIO_I2C
+else
+HI_GPIO_I2C:=HI_GPIO_XXX
+endif
+
+
+ARFLAGS = rcv
+ARFLAGS_SO = -shared -fPIC -o
+CFLAGS  = -Wall -fPIC -D$(HI_FPGA) -D$(HI_GPIO_I2C)
+CFLAGS  += -O2
+
+ifeq ($(HIGDB),HI_GDB)
+CFLAGS += -g
+endif
+
+ISP_INC := $(ISP_PATH)/include
+3A_INC := $(3A_PATH)/include
+INC := -I$(REL_INC) -I$(ISP_INC) -I$(3A_INC)
+
+ifeq ($(CONFIG_GPIO_I2C), Y)
+    INC += -I$(EXT_PATH)/gpio-i2c-ex
+    INC += -I$(EXT_PATH)/gpio-i2c
+    INC += -I$(EXT_PATH)/gpio-i2c-ov
+else
+    INC += -I$(EXT_PATH)/i2c
+    INC += -I$(EXT_PATH)/hi_i2c
+endif
+
+COMPILE = $(CC) $(CFLAGS) $(DFLAGS) -lm
+
+$(OBJPATH)/%.o: ./%.c
+	@[ -e $(LIBPATH) ] || mkdir $(LIBPATH)
+	@[ -e $(OBJPATH) ] || mkdir $(OBJPATH)
+	@$(COMPILE) -o $@ -c $< $(INC)
+
+SRCS = $(wildcard ./*.c)
+OBJS = $(SRCS:%.c=%.o)
+OBJS := $(OBJS:./%=obj/%)
+
+TARGETLIB := $(LIBPATH)/libsns_gc1014.a
+TARGETLIB_SO := $(LIBPATH)/libsns_gc1014.so
+
+all:$(TARGETLIB)
+$(TARGETLIB):$(OBJS)
+	@($(AR) $(ARFLAGS) $(TARGETLIB) $(OBJS))
+	@($(CC) $(ARFLAGS_SO) $(TARGETLIB_SO) $(OBJS))
+
+clean:
+	@$(RM) -rf $(TARGETLIB) $(OBJS)
+	@$(RM) -rf $(LIBPATH) $(OBJPATH)
