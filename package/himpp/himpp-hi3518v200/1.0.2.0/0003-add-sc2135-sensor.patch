diff -uNr a/component/isp/sensor/smartsens_sc2135/Makefile b/component/isp/sensor/smartsens_sc2135/Makefile
--- a/component/isp/sensor/smartsens_sc2135/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/component/isp/sensor/smartsens_sc2135/Makefile	2016-09-07 23:56:50.960445608 +0800
@@ -0,0 +1,75 @@
+#
+# sensor lib Makefile
+#
+
+ifeq ($(PARAM_FILE), )
+	PARAM_FILE:=../../../../Makefile.param
+	include $(PARAM_FILE)
+endif
+
+ISP_PATH := $(SDK_PATH)/component/isp
+EXT_PATH := $(SDK_PATH)/$(EXTDRV)
+3A_PATH  := $(ISP_PATH)/3a
+LIBPATH = $(ISP_PATH)/lib
+OBJPATH = ./obj
+
+ifeq ($(CONFIG_GPIO_I2C),y)
+HI_GPIO_I2C:=HI_GPIO_I2C
+else
+HI_GPIO_I2C:=HI_GPIO_XXX
+endif
+
+ARFLAGS = rcv
+ARFLAGS_SO = $(LIBS_LD_CFLAGS)
+ARFLAGS_SO += -shared -fPIC -o
+CFLAGS  = -Wall -fPIC -D$(HI_FPGA) -D$(HI_GPIO_I2C)
+CFLAGS  += -O2
+CFLAGS  += $(LIBS_CFLAGS)
+
+ifeq ($(ISP_INI_CONFIG), y)
+CFLAGS += -D INIFILE_CONFIG_MODE
+endif
+
+ifeq ($(HIGDB),HI_GDB)
+CFLAGS += -g
+endif
+
+ifeq ($(CONFIG_JPEGEDCF), y)
+     CFLAGS += -D ENABLE_JPEGEDCF 
+endif
+BUS_DIR := $(EXT_PATH)/ssp-sony/
+
+ISP_INC := $(ISP_PATH)/include
+3A_INC := $(3A_PATH)/include
+INC := -I$(BUS_DIR) -I$(REL_INC) -I$(ISP_INC) -I$(3A_INC) -I$(ISP_PATH)/iniparser 
+
+ifeq ($(CONFIG_GPIO_I2C), y)
+    INC += -I$(EXT_PATH)/gpio-i2c-ex
+    INC += -I$(EXT_PATH)/gpio-i2c
+else
+    INC += -I$(EXT_PATH)/i2c
+    INC += -I$(EXT_PATH)/hi_i2c
+endif
+
+COMPILE = $(CC) $(CFLAGS) $(DFLAGS) -lm
+
+$(OBJPATH)/%.o: ./%.c 
+	@[ -e $(LIBPATH) ] || mkdir $(LIBPATH)
+	@[ -e $(OBJPATH) ] || mkdir $(OBJPATH)
+	@$(COMPILE) -o $@ -c $< $(INC) 
+
+SRCS = $(wildcard ./*.c)
+OBJS = $(SRCS:%.c=%.o)
+OBJS := $(OBJS:./%=obj/%)
+
+TARGETLIB := $(LIBPATH)/libsns_sc2135.a
+TARGETLIB_SO := $(LIBPATH)/libsns_sc2135.so
+
+all:$(TARGETLIB)
+$(TARGETLIB):$(OBJS)
+	@($(AR) $(ARFLAGS) $(TARGETLIB) $(OBJS))
+	@($(CC) $(ARFLAGS_SO) $(TARGETLIB_SO) $(OBJS))
+
+clean:
+	@$(RM) -rf $(TARGETLIB) $(OBJS)
+	@$(RM) -rf $(LIBPATH) $(OBJPATH)
diff -uNr a/component/isp/sensor/smartsens_sc2135/sc2135_1080p_line.ini b/component/isp/sensor/smartsens_sc2135/sc2135_1080p_line.ini
--- a/component/isp/sensor/smartsens_sc2135/sc2135_1080p_line.ini	1970-01-01 08:00:00.000000000 +0800
+++ b/component/isp/sensor/smartsens_sc2135/sc2135_1080p_line.ini	2016-07-11 20:47:29.000000000 +0800
@@ -0,0 +1,260 @@
+[sensor]
+Sensor_type   =sc2135                   ;sensor name
+Mode          =0                        ;WDR_MODE_NONE = 0
+                                        ;WDR_MODE_BUILT_IN = 1
+                                        ;WDR_MODE_2To1_LINE = 2
+                                        ;WDR_MODE_2To1_FRAME = 3
+                                        ;WDR_MODE_2To1_FRAME_FULL_RATE =4 ...etc
+DllFile   =libs/libsns_sc2135.so        ;sensor lib path
+
+
+[mode]                               
+input_mode =4                           ;INPUT_MODE_MIPI = 0
+                                        ;INPUT_MODE_SUBLVDS = 1
+                                        ;INPUT_MODE_LVDS = 2 ...etc
+
+dev_attr = 2                         	;mipi_dev_attr_t = 0
+                                        ;lvds_dev_attr_t = 1
+                                        ;NULL =2
+
+[mipi]    
+;----------only for mipi_dev---------               
+data_type =-1                       	;raw data type: 8/10/12/14 bit
+                                        ;RAW_DATA_8BIT = 0
+                                        ;RAW_DATA_10BIT = 1
+                                        ;RAW_DATA_12BIT = 2 
+                                        ;RAW_DATA_14BIT = 3 
+lane_id = -1|-1|-1|-1|-1|-1|-1|-1|      ;lane_id: -1 - disable
+
+[lvds]
+;----------only for lvds_dev---------                                
+img_size_w = -1                     	;oringnal sensor input image size W
+img_size_h = -1                     	;oringnal sensor input image size H
+wdr_mode = -1                           ;HI_WDR_MODE_NONE =0
+                                        ;HI_WDR_MODE_2F = 1
+                                        ;HI_WDR_MODE_3F = 2
+                                        ;HI_WDR_MODE_4F =3
+sync_mode = -1                  	;LVDS_SYNC_MODE_SOL = 0
+                                        ;LVDS_SYNC_MODE_SAV = 1
+raw_data_type = -1                    	;RAW_DATA_8BIT = 0
+                                        ;RAW_DATA_10BIT = 1
+                                        ;RAW_DATA_12BIT = 2
+                                        ;RAW_DATA_14BIT = 3
+data_endian = -1                        ;LVDS_ENDIAN_LITTLE = 0
+                                        ;LVDS_ENDIAN_BIG = 1
+sync_code_endian =-1                    ;LVDS_ENDIAN_LITTLE = 0
+                                        ;LVDS_ENDIAN_BIG = 1
+lane_id = -1|-1|-1|-1|-1|-1|-1|-1|      ;lane_id: -1 - disable
+lvds_lane_num = -1                      ;LVDS_LANE_NUM
+wdr_vc_num = -1                         ;WDR_VC_NUM
+sync_code_num = -1                      ;SYNC_CODE_NUM
+sync_code_0 = -1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|
+sync_code_1 = -1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|
+sync_code_2 = -1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|
+sync_code_3 = -1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|
+sync_code_4 = -1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|
+sync_code_5 = -1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|
+sync_code_6 = -1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|
+sync_code_7 = -1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|
+
+[isp_image]
+Isp_x      =0
+Isp_y      =0
+Isp_W      =1920
+Isp_H      =1080
+Isp_FrameRate=30
+Isp_Bayer  =3   ;BAYER_RGGB=0, BAYER_GRBG=1, BAYER_GBRG=2, BAYER_BGGR=3 
+
+
+[vi_dev]
+Input_mod =2    ;VI_INPUT_MODE_BT656 = 0
+                ;VI_INPUT_MODE_BT601,
+                ;VI_INPUT_MODE_DIGITAL_CAMERA
+Work_mod =0     ;VI_WORK_MODE_1Multiplex = 0
+                ;VI_WORK_MODE_2Multiplex,
+                ;VI_WORK_MODE_4Multiplex
+Combine_mode =0 ;Y/C composite or separation mode
+                ;VI_COMBINE_COMPOSITE = 0 /*Composite mode */
+                ;VI_COMBINE_SEPARATE,     /*Separate mode */
+Comp_mode    =0 ;Component mode (single-component or dual-component)
+                ;VI_COMP_MODE_SINGLE = 0, /*single component mode */
+                ;VI_COMP_MODE_DOUBLE = 1, /*double component mode */
+Clock_edge   =1 ;Clock edge mode (sampling on the rising or falling edge)
+                ;VI_CLK_EDGE_SINGLE_UP=0, /*rising edge */
+                ;VI_CLK_EDGE_SINGLE_DOWN, /*falling edge */
+Mask_num     =2 ;Component mask
+Mask_0       =0xFFF0000
+Mask_1       =0x0
+Scan_mode    =1 ;VI_SCAN_INTERLACED = 0
+                ;VI_SCAN_PROGRESSIVE,
+Data_seq     =2 ;data sequence (ONLY for YUV format)
+                ;----2th component U/V sequence in bt1120
+                ;    VI_INPUT_DATA_VUVU = 0,
+                ;    VI_INPUT_DATA_UVUV,
+                ;----input sequence for yuv
+                ;    VI_INPUT_DATA_UYVY = 0,
+                ;    VI_INPUT_DATA_VYUY,
+                ;    VI_INPUT_DATA_YUYV,
+                ;    VI_INPUT_DATA_YVYU
+                
+Vsync   =1     ; vertical synchronization signal
+                ;VI_VSYNC_FIELD = 0, 
+                ;VI_VSYNC_PULSE,
+VsyncNeg=0      ;Polarity of the vertical synchronization signal
+                ;VI_VSYNC_NEG_HIGH = 0, 
+                ;VI_VSYNC_NEG_LOW /*if VIU_VSYNC_E 
+Hsync  =0       ;Attribute of the horizontal synchronization signal
+                ;VI_HSYNC_VALID_SINGNAL = 0,
+                ;VI_HSYNC_PULSE,
+HsyncNeg =0     ;Polarity of the horizontal synchronization signal
+                ;VI_HSYNC_NEG_HIGH = 0, 
+                ;VI_HSYNC_NEG_LOW
+VsyncValid =0   ;Attribute of the valid vertical synchronization signal
+                ;VI_VSYNC_NORM_PULSE = 0,
+                ;VI_VSYNC_VALID_SINGAL, 
+VsyncValidNeg =0;Polarity of the valid vertical synchronization signal
+                ;VI_VSYNC_VALID_NEG_HIGH = 0,
+                ;VI_VSYNC_VALID_NEG_LOW 
+Timingblank_HsyncHfb =0     ;Horizontal front blanking width
+Timingblank_HsyncAct =1920  ;Horizontal effetive width
+Timingblank_HsyncHbb =0     ;Horizontal back blanking width
+Timingblank_VsyncVfb =0     ;Vertical front blanking height
+Timingblank_VsyncVact =1080 ;Vertical effetive width
+Timingblank_VsyncVbb=0      ;Vertical back blanking height
+Timingblank_VsyncVbfb =0    ;Even-field vertical front blanking height(interlace, invalid progressive)
+Timingblank_VsyncVbact=0    ;Even-field vertical effetive width(interlace, invalid progressive)
+Timingblank_VsyncVbbb =0    ;Even-field vertical back blanking height(interlace, invalid progressive)
+
+;----- only for bt656 ----------
+FixCode   =0    ;BT656_FIXCODE_1 = 0,
+                ;BT656_FIXCODE_0 
+FieldPolar=0    ;BT656_FIELD_POLAR_STD = 0
+                ;BT656_FIELD_POLAR_NSTD
+DataPath  =1    ;ISP enable or bypass
+                ;VI_PATH_BYPASS    = 0,/* ISP bypass */
+                ;VI_PATH_ISP       = 1,/* ISP enable */
+                ;VI_PATH_RAW       = 2,/* Capture raw data, for debug */
+InputDataType=1 ;VI_DATA_TYPE_YUV = 0,VI_DATA_TYPE_RGB = 1,
+DataRev      =FALSE ;Data reverse. FALSE = 0; TRUE = 1
+DevRect_x=0     ;
+DevRect_y=0    ;
+DevRect_w=1920  ;
+DevRect_h=1080  ;
+
+[vi_chn]
+CapRect_X    =0 
+CapRect_Y    =0
+CapRect_Width=1920
+CapRect_Height=1080
+DestSize_Width=1920
+DestSize_Height=1080
+CapSel       =2 ;Frame/field select. ONLY used in interlaced mode
+                ;VI_CAPSEL_TOP = 0,                  /* top field */
+                ;VI_CAPSEL_BOTTOM,                   /* bottom field */
+                ;VI_CAPSEL_BOTH,                     /* top and bottom field */
+				
+PixFormat    =23;PIXEL_FORMAT_YUV_SEMIPLANAR_422 = 22
+                ;PIXEL_FORMAT_YUV_SEMIPLANAR_420 = 23 ...etc
+CompressMode =0 ;COMPRESS_MODE_NONE = 0
+                ;COMPRESS_MODE_SEG =1 ...etc
+
+;SrcFrameRate=-1 ;Source frame rate. -1: not controll
+;FrameRate   =-1 ;Target frame rate. -1: not controll
+
+SrcFrameRate=30 ;Source frame rate. -1: not controll
+FrameRate   =30 ;Target frame rate. -1: not controll
+[vpss_group]
+Vpss_DciEn  =FALSE
+Vpss_IeEn   =FALSE
+Vpss_NrEn   =TRUE
+Vpss_HistEn =FALSE
+Vpss_DieMode=1  ;Define de-interlace mode
+                ;VPSS_DIE_MODE_AUTO  = 0,
+                ;VPSS_DIE_MODE_NODIE = 1,
+                ;VPSS_DIE_MODE_DIE   = 2,
+				
+[vpss_corp]
+Crop_enable =FALSE   					
+Coordinate  =1  ;VPSS_CROP_RATIO_COOR = 0,   /*Ratio coordinate*/
+		        ;VPSS_CROP_ABS_COOR = 1      /*Absolute coordinate*/
+Crop_X      =128    
+Crop_Y      =128    
+Crop_W      =1158   
+Crop_H      =562    
+
+[vpss_chn]
+Vpss_W    =1920
+Vpss_H    =1080
+CompressMode=0  ;COMPRESS_MODE_NONE = 0
+		        ;COMPRESS_MODE_SEG =1 ...etc
+Mirror     =FALSE;Whether to mirror
+Flip       =FALSE;Whether to flip
+				
+[vb_conf]
+VbCnt=5
+#VbCnt=2
+vbTimes=15
+
+[venc_comm]
+venc_chn =1     ;create venc chn number;(0,2]
+BufCnt = 1      ;network meida-trans bufcnt
+
+[venc_0]
+PicWidth  =1920
+PicHeight =1080
+Profile   =2
+RcMode   =VENC_RC_MODE_H264CBR
+
+Gop    =50  
+StatTime =2  
+ViFrmRate  =30
+TargetFrmRate=15
+;----- only for VENC_RC_MODE_H264CBR ----------
+BitRate=4096
+FluctuateLevel=1
+;----- only for VENC_RC_MODE_H264VBR ----------
+MaxBitRate =10000
+
+MaxQp=32
+MinQp=24
+;----- only for VENC_RC_MODE_H264FIXQP ----------
+IQp=45
+
+PQp=40
+
+[venc_1]
+PicWidth  =1920
+PicHeight =1080
+Profile   =2
+RcMode   =VENC_RC_MODE_H264CBR
+
+Gop    =50  
+StatTime =2  
+ViFrmRate  =30 
+TargetFrmRate=15
+;----- only for VENC_RC_MODE_H264CBR ----------
+BitRate=4096
+FluctuateLevel=1
+;----- only for VENC_RC_MODE_H264VBR ----------
+MaxBitRate =10000
+
+MaxQp=32
+
+MinQp=24
+;----- only for VENC_RC_MODE_H264FIXQP ----------
+IQp=40
+
+PQp=45
+
+[bind]
+ViDev   =0
+ViChn   =0
+VpssGrp =0
+VpssChn = 0
+VoDev   =0
+VoChn   =0
+ViSnapChn =0
+VpssSnapGrp=0
+VpssSnapChn=1
+VencSnapGrp=1
+VencSnapChn=3
diff -uNr a/component/isp/sensor/smartsens_sc2135/sc2135_cmos.c b/component/isp/sensor/smartsens_sc2135/sc2135_cmos.c
--- a/component/isp/sensor/smartsens_sc2135/sc2135_cmos.c	1970-01-01 08:00:00.000000000 +0800
+++ b/component/isp/sensor/smartsens_sc2135/sc2135_cmos.c	2016-09-08 00:11:14.578293551 +0800
@@ -0,0 +1,1106 @@
+#if !defined(__SC2135_CMOS_H_)
+#define __SC2135_CMOS_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <assert.h>
+#include "hi_comm_sns.h"
+#include "hi_comm_video.h"
+#include "hi_sns_ctrl.h"
+#include "mpi_isp.h"
+#include "mpi_ae.h"
+#include "mpi_awb.h"
+#include "mpi_af.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C"{
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+
+#define SC2135_ID 2135
+
+#define CMOS_SC2135_ISP_WRITE_SENSOR_ENABLE (1)
+#define FULL_LINES_MAX  (0xFFFF)
+
+
+/* To change the mode of config. ifndef INIFILE_CONFIG_MODE, quick config mode.*/
+/* else, cmos_cfg.ini file config mode*/
+#ifdef INIFILE_CONFIG_MODE
+
+extern AE_SENSOR_DEFAULT_S  g_AeDft[];
+extern AWB_SENSOR_DEFAULT_S g_AwbDft[];
+extern ISP_CMOS_DEFAULT_S   g_IspDft[];
+extern HI_S32 Cmos_LoadINIPara(const HI_CHAR *pcName);
+#else
+
+#endif
+
+/****************************************************************************
+ * local variables                                                            *
+ ****************************************************************************/
+
+extern const unsigned int sensor_i2c_addr;
+extern unsigned int sensor_addr_byte;
+extern unsigned int sensor_data_byte;
+
+#define VMAX_ADDR_H              (0x320e)
+#define VMAX_ADDR_L              (0x320f)
+
+#define SENSOR_1080P_30FPS_MODE  (1)
+
+#define INCREASE_LINES (0) /* make real fps less than stand fps because NVR require*/
+#define VMAX_1080P30_LINEAR     (1125+INCREASE_LINES)
+#define CMOS_SC2135_SLOW_FRAMERATE_MODE (0)
+
+HI_U8 gu8SensorImageMode = SENSOR_1080P_30FPS_MODE;
+WDR_MODE_E genSensorMode = WDR_MODE_NONE;
+
+static HI_U32 gu32FullLinesStd = VMAX_1080P30_LINEAR;
+static HI_U32 gu32FullLines = VMAX_1080P30_LINEAR;
+
+static HI_BOOL bInit = HI_FALSE;
+HI_BOOL bSensorInit = HI_FALSE;
+ISP_SNS_REGS_INFO_S g_stSnsRegsInfo = {0};
+ISP_SNS_REGS_INFO_S g_stPreSnsRegsInfo = {0};
+static HI_U8 gu8Fps = 30;
+
+
+/* AE default parameter and function */
+static HI_S32 cmos_get_ae_default(AE_SENSOR_DEFAULT_S *pstAeSnsDft)
+{
+	if (HI_NULL == pstAeSnsDft)
+	{
+		printf("null pointer when get ae default value!\n");
+		return -1;
+	}
+
+	pstAeSnsDft->u32LinesPer500ms = gu32FullLinesStd*30/2;
+	pstAeSnsDft->u32FullLinesStd = gu32FullLinesStd;
+	pstAeSnsDft->u32FlickerFreq = 0;
+	pstAeSnsDft->u32FullLinesMax = FULL_LINES_MAX;
+
+	pstAeSnsDft->au8HistThresh[0] = 0xd;
+	pstAeSnsDft->au8HistThresh[1] = 0x28;
+	pstAeSnsDft->au8HistThresh[2] = 0x60;
+	pstAeSnsDft->au8HistThresh[3] = 0x80;
+
+	pstAeSnsDft->u8AeCompensation = 0x2b;
+
+	pstAeSnsDft->stIntTimeAccu.enAccuType = AE_ACCURACY_LINEAR;
+	pstAeSnsDft->stIntTimeAccu.f32Accuracy = 1;
+	pstAeSnsDft->stIntTimeAccu.f32Offset = 0;
+	pstAeSnsDft->u32MaxIntTime = gu32FullLinesStd - 4;
+	pstAeSnsDft->u32MinIntTime = 1;
+	pstAeSnsDft->u32MaxIntTimeTarget = 0xffff;//2808;
+	pstAeSnsDft->u32MinIntTimeTarget = pstAeSnsDft->u32MinIntTime;
+
+	pstAeSnsDft->stAgainAccu.enAccuType = AE_ACCURACY_LINEAR;
+	pstAeSnsDft->stAgainAccu.f32Accuracy = 0.0625; 
+	pstAeSnsDft->u32MaxAgain = 992;  //62倍 
+	pstAeSnsDft->u32MinAgain = 16;
+	pstAeSnsDft->u32MaxAgainTarget = 992;
+	pstAeSnsDft->u32MinAgainTarget = 16;
+
+	pstAeSnsDft->stDgainAccu.enAccuType = AE_ACCURACY_LINEAR;
+	pstAeSnsDft->stDgainAccu.f32Accuracy = 0.0625;//invalidate
+	pstAeSnsDft->u32MaxDgain = 16;	
+	pstAeSnsDft->u32MinDgain = 16;
+	pstAeSnsDft->u32MaxDgainTarget = 16;
+	pstAeSnsDft->u32MinDgainTarget = 16; 
+
+	pstAeSnsDft->u32ISPDgainShift = 8;
+	pstAeSnsDft->u32MinISPDgainTarget = 1 << pstAeSnsDft->u32ISPDgainShift;
+	pstAeSnsDft->u32MaxISPDgainTarget = 16 << pstAeSnsDft->u32ISPDgainShift; 
+
+
+
+	return 0;
+}
+
+
+/* the function of sensor set fps */
+static HI_VOID cmos_fps_set(HI_FLOAT f32Fps, AE_SENSOR_DEFAULT_S *pstAeSnsDft)
+{
+
+	HI_U32 u32VblankingLines = 0xFFFF;
+	if ((f32Fps <= 30) && (f32Fps >= 0.5))
+	{
+		if(SENSOR_1080P_30FPS_MODE == gu8SensorImageMode)
+		{
+			u32VblankingLines = VMAX_1080P30_LINEAR * 30 / f32Fps;
+		}
+	}
+	else
+	{
+		printf("Not support Fps: %f\n", f32Fps);
+		return;
+	}
+	gu32FullLinesStd = u32VblankingLines;
+
+	gu32FullLinesStd = gu32FullLinesStd > FULL_LINES_MAX ? FULL_LINES_MAX : gu32FullLinesStd;
+
+#if CMOS_SC2135_ISP_WRITE_SENSOR_ENABLE
+	g_stSnsRegsInfo.astI2cData[4].u32Data = (u32VblankingLines >> 8) & 0xFF ;
+	g_stSnsRegsInfo.astI2cData[5].u32Data = u32VblankingLines & 0xFF;
+#else
+	sensor_write_register(0x320e, (u32VblankingLines >> 8) & 0xff) ;
+	sensor_write_register(0x320f, u32VblankingLines & 0xff);
+#endif
+
+	pstAeSnsDft->f32Fps = f32Fps;
+	//	printf("%s %d u32MaxIntTime=%d \n",__FUNCTION__,__LINE__,pstAeSnsDft->u32MaxIntTime);
+	pstAeSnsDft->u32MaxIntTime = u32VblankingLines - 4;
+	//   pstAeSnsDft->u32MaxIntTimeTarget=u32VblankingLines - 4;
+	//	printf("%s %d u32MaxIntTime=%d \n",__FUNCTION__,__LINE__,pstAeSnsDft->u32MaxIntTime);
+	gu8Fps = f32Fps;	
+	pstAeSnsDft->u32LinesPer500ms = gu32FullLinesStd * f32Fps/ 2;
+	pstAeSnsDft->u32FullLinesStd = gu32FullLinesStd;
+
+	//gu32FullLines = gu32FullLinesStd;
+	//pstAeSnsDft->u32FullLines = gu32FullLines;
+#if 1
+	sensor_write_register(0x336a, ((gu32FullLines >> 8) & 0xFF));
+	sensor_write_register(0x336b, gu32FullLines & 0xFf);
+
+	sensor_write_register(0x3368, (((gu32FullLines - 0x265) >> 8) & 0xFF));
+	sensor_write_register(0x3369, (gu32FullLines - 0x265) & 0xFf);
+#endif
+	return;
+}
+
+
+
+static HI_VOID cmos_slow_framerate_set(HI_U32 u32FullLines,
+		AE_SENSOR_DEFAULT_S *pstAeSnsDft)
+{
+	u32FullLines = (u32FullLines > 0xFFFF) ? 0xFFFF : u32FullLines;
+	gu32FullLines = u32FullLines;
+	pstAeSnsDft->u32FullLines = gu32FullLines;
+
+	gu32FullLinesStd = gu32FullLinesStd > FULL_LINES_MAX ? FULL_LINES_MAX : gu32FullLinesStd;
+
+#if CMOS_SC2135_ISP_WRITE_SENSOR_ENABLE
+	g_stSnsRegsInfo.astI2cData[4].u32Data = (u32FullLines >> 8) & 0xFF;
+	g_stSnsRegsInfo.astI2cData[5].u32Data = u32FullLines & 0xFf;
+#else
+	sensor_write_register(0x320e, ((u32FullLines >> 8) & 0xFF));
+	sensor_write_register(0x320f, u32FullLines & 0xFf);
+#endif
+	pstAeSnsDft->u32MaxIntTime = gu32FullLines - 4;
+
+#if 0
+	sensor_write_register(0x336a, ((u32FullLines >> 8) & 0xFF));
+	sensor_write_register(0x336b, u32FullLines & 0xFf);
+
+	sensor_write_register(0x3368, (((u32FullLines - 0x265) >> 8) & 0xFF));
+	sensor_write_register(0x3369, (u32FullLines - 0x265) & 0xFf);
+#endif
+	//pstAeSnsDft->u32LinesPer500ms = gu32FullLinesStd * gu8Fps/ 2;
+	// pstAeSnsDft->u32FullLinesStd = gu32FullLinesStd;
+
+	return;
+}
+
+
+/* while isp notify ae to update sensor regs, ae call these funcs. */
+static HI_VOID cmos_inttime_update(HI_U32 u32IntTime)
+{
+#if CMOS_SC2135_ISP_WRITE_SENSOR_ENABLE
+	g_stSnsRegsInfo.astI2cData[0].u32Data = (u32IntTime >> 4) & 0xFF; 
+	g_stSnsRegsInfo.astI2cData[1].u32Data = (u32IntTime<<4) & 0xF0;
+#else
+	sensor_write_register(0x3e01, ((u32IntTime >> 4) & 0xFF));
+	sensor_write_register(0x3e02, (u32IntTime<<4) & 0xF0);
+#endif
+
+	return;
+}
+
+
+static HI_VOID cmos_gains_update(HI_U32 u32Again, HI_U32 u32Dgain)
+{
+	//限制最大模拟增益逻辑	
+	//sc2135_Again_limit(&u32Again);
+
+
+#if CMOS_SC2135_ISP_WRITE_SENSOR_ENABLE
+	g_stSnsRegsInfo.astI2cData[2].u32Data = (u32Again & 0xF00) >> 8;
+	g_stSnsRegsInfo.astI2cData[3].u32Data = u32Again & 0xFF;
+#else
+	sensor_write_register(0x3e08, (u32Again & 0xF00) >> 8);
+	sensor_write_register(0x3e09, u32Again & 0xFF);
+#endif	
+
+#if 1
+	if(u32Again <= 0x20)
+		sensor_write_register(0x3630, 0xe4);
+	else
+		sensor_write_register(0x3630, 0x84);
+
+	if(u32Again <= 0x20)
+		sensor_write_register(0x3635, 0x56);
+	else if(u32Again <= 0x40)
+		sensor_write_register(0x3635, 0x54);
+	else if(u32Again <= 0x80)
+		sensor_write_register(0x3635, 0x54);
+	else if(u32Again <= 0x100)
+		sensor_write_register(0x3635, 0x52);
+	else 
+		sensor_write_register(0x3635, 0x52);
+#endif
+
+	return;
+}
+
+
+
+HI_S32 cmos_init_ae_exp_function(AE_SENSOR_EXP_FUNC_S *pstExpFuncs)
+{
+	memset(pstExpFuncs, 0, sizeof(AE_SENSOR_EXP_FUNC_S));
+
+	pstExpFuncs->pfn_cmos_get_ae_default    = cmos_get_ae_default;
+	pstExpFuncs->pfn_cmos_fps_set           = cmos_fps_set;
+	pstExpFuncs->pfn_cmos_slow_framerate_set= cmos_slow_framerate_set;    
+	pstExpFuncs->pfn_cmos_inttime_update    = cmos_inttime_update;
+	pstExpFuncs->pfn_cmos_gains_update      = cmos_gains_update;
+	pstExpFuncs->pfn_cmos_again_calc_table  = NULL;//cmos_again_calc_table;
+	pstExpFuncs->pfn_cmos_dgain_calc_table  = NULL;//cmos_dgain_calc_table;
+
+	return 0;
+}
+
+
+/* AWB default parameter and function */
+static AWB_CCM_S g_stAwbCcm =
+{  
+	4850,	 
+	{		
+		0x0204,  0x80DF,  0x8025,
+		0x8070,  0x01EE,  0x807E,		
+		0xF,     0x8170,  0x0261	
+	},	
+
+	3160,	 
+	{		
+		0x01EA,  0x809E,  0x804C,		
+		0x80A4,  0x01FC,  0x8058,		
+		0x800E,  0x81F1,  0x02FF	
+	},
+
+	2470,	 
+	{			 
+		0x01BA,  0x803C,  0x807E,		 
+		0x80B2,  0x01F6,  0x8044,		
+		0x8056,  0x8360,  0x04B6	
+	} 
+
+};
+
+static AWB_AGC_TABLE_S g_stAwbAgcTable =
+{
+	/* bvalid */
+	1,
+
+	/*1,  2,  4,  8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768*/
+	/* saturation */   
+	//{0x7a,0x7a,0x78,0x74,0x68,0x60,0x58,0x50,0x48,0x40,0x38,0x38,0x38,0x38,0x38,0x38}
+	//{0x8a,0x8a,0x88,0x84,0x78,0x70,0x68,0x60,0x58,0x50,0x48,0x48,0x48,0x48,0x48,0x48}
+	{0x90,0x90,0x80,0x80,0x70,0x70,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50}//3.23 wangji
+
+};
+
+static HI_S32 cmos_get_awb_default(AWB_SENSOR_DEFAULT_S *pstAwbSnsDft)
+{
+	if (HI_NULL == pstAwbSnsDft)
+	{
+		printf("null pointer when get awb default value!\n");
+		return -1;
+	}
+
+	memset(pstAwbSnsDft, 0, sizeof(AWB_SENSOR_DEFAULT_S));
+
+	pstAwbSnsDft->u16WbRefTemp = 4850;
+	pstAwbSnsDft->au16GainOffset[0] = 0x178;    
+	pstAwbSnsDft->au16GainOffset[1] = 0x100;    
+	pstAwbSnsDft->au16GainOffset[2] = 0x100;    
+	pstAwbSnsDft->au16GainOffset[3] = 0x14F;    
+	pstAwbSnsDft->as32WbPara[0] = 104;    
+	pstAwbSnsDft->as32WbPara[1] = 17;    
+	pstAwbSnsDft->as32WbPara[2] = -134;    
+	pstAwbSnsDft->as32WbPara[3] = 206995;    
+	pstAwbSnsDft->as32WbPara[4] = 128;    
+	pstAwbSnsDft->as32WbPara[5] = -157493;
+
+	memcpy(&pstAwbSnsDft->stCcm, &g_stAwbCcm, sizeof(AWB_CCM_S));
+	memcpy(&pstAwbSnsDft->stAgcTbl, &g_stAwbAgcTable, sizeof(AWB_AGC_TABLE_S));
+
+	return 0;
+}
+
+HI_S32 cmos_init_awb_exp_function(AWB_SENSOR_EXP_FUNC_S *pstExpFuncs)
+{
+	memset(pstExpFuncs, 0, sizeof(AWB_SENSOR_EXP_FUNC_S));
+
+	pstExpFuncs->pfn_cmos_get_awb_default = cmos_get_awb_default;
+
+	return 0;
+}
+
+#define DMNR_CALIB_CARVE_NUM_SC2135 7
+
+float g_coef_calib_sc2135[DMNR_CALIB_CARVE_NUM_SC2135][4] = 
+{     
+	{100.000000f, 2.000000f, 0.040074f, 5.696412f, },      
+	{202.000000f, 2.305351f, 0.041376f, 5.851753f, },      
+	{399.000000f, 2.600973f, 0.044092f, 6.013911f, },      
+	{796.000000f, 2.900913f, 0.046887f, 6.823170f, },      
+	{1587.000000f, 3.200577f, 0.053495f, 7.039457f, },      
+	{3156.000000f, 3.499137f, 0.063180f, 8.698933f, },      
+	{5906.000000f, 3.771293f, 0.072928f, 11.872782f, },  
+};  
+
+
+static ISP_NR_ISO_PARA_TABLE_S g_stNrIsoParaTab[HI_ISP_NR_ISO_LEVEL_MAX] = 
+{
+	//u16Threshold//u8varStrength//u8fixStrength//u8LowFreqSlope	
+	{1500,       160,             256-256,            0 },  //100    //                      //                                                
+	{1500,       120,             256-256,            0 },  //200    // ISO                  // ISO //u8LowFreqSlope
+	{1500,       100,             256-256,            0 },  //400    //{400,  1200, 96,256}, //{400 , 0  }
+{1750,       80,              256-256,            8 },  //800    //{800,  1400, 80,256}, //{600 , 2  }
+{1500,       255,             256-256,            6 },  //1600   //{1600, 1200, 72,256}, //{800 , 8  }
+{1500,       255,             256-256,            0 },  //3200   //{3200, 1200, 64,256}, //{1000, 12 }
+{1375,       255,             256-256,            0 },  //6400   //{6400, 1100, 56,256}, //{1600, 6  }
+{1375,       255,             256-256,            0 },  //12800  //{12000,1100, 48,256}, //{2400, 0  }
+{1375,       255,             256-256,            0 },  //25600  //{36000,1100, 48,256}, //
+{1375,       255,             256-256,            0 },  //51200  //{64000,1100, 96,256}, //
+{1250,       255,             256-256,            0 },  //102400 //{82000,1000,240,256}, //
+{1250,       255,             256-256,            0 },  //204800 //                           //
+{1250,       255,             256-256,            0 },  //409600 //                           //
+{1250,       255,             256-256,            0 },  //819200 //                           //
+{1250,       255,             256-256,            0 },  //1638400//                           //
+{1250,       255,             256-256,            0 },  //3276800//                           //
+	};
+
+static ISP_CMOS_DEMOSAIC_S g_stIspDemosaic =
+{
+	/*For Demosaic*/
+	1, /*bEnable*/			
+	24,/*u16VhLimit*/	
+	40-24,/*u16VhOffset*/
+	24,   /*u16VhSlope*/
+	/*False Color*/
+	1,    /*bFcrEnable*/
+	{ 8, 8, 8, 8, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0},    /*au8FcrStrength[ISP_AUTO_ISO_STENGTH_NUM]*/
+	{24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24},    /*au8FcrThreshold[ISP_AUTO_ISO_STENGTH_NUM]*/
+	/*For Ahd*/
+	400, /*u16UuSlope*/	
+	{512,512,512,512,512,512,512,  400,  0,0,0,0,0,0,0,0}    /*au16NpOffset[ISP_AUTO_ISO_STENGTH_NUM]*/
+};
+
+static ISP_CMOS_GE_S g_stIspGe =
+{
+	/*For GE*/
+	0,    /*bEnable*/			
+	7,    /*u8Slope*/	
+	7,    /*u8Sensitivity*/
+	4096, /*u16Threshold*/
+	4096, /*u16SensiThreshold*/	
+	{1024,1024,1024,2048,2048,2048,2048,  2048,  2048,2048,2048,2048,2048,2048,2048,2048}    /*au16Strength[ISP_AUTO_ISO_STENGTH_NUM]*/	
+};
+static ISP_CMOS_RGBSHARPEN_S g_stIspRgbSharpen =
+{      
+	//{100,200,400,800,1600,3200,6400,12800,25600,51200,102400,204800,409600,819200,1638400,3276800};
+	{0,	  0,   0,  0,   0,   0,   0,    0,    0,    1,    1,     1,     1,     1,     1,       1},/* enPixSel */
+	{0xf0, 0x70, 0x68, 0x60, 0x50, 0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},/*SharpenUD*/ //3.23 wangji
+	{0x80, 0x70, 0x68, 0x60, 0x50, 0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},/*SharpenD*/  //3.23 wangji
+
+	{0x10, 0x18, 0x20, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},/*NoiseThd*/
+	{0x18, 0x2f, 0x18, 0x09, 0x04, 0x07, 0x07, 0x07, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c},/*EdgeThd2*/
+	{0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},/*overshootAmt*/ //3.23 wangji
+	{0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},/*undershootAmt*///3.23 wangji
+};
+
+static ISP_CMOS_UVNR_S g_stIspUVNR = 
+{
+	//{100,	200, 400, 800, 1600, 3200, 6400, 12800,	25600, 51200, 102400, 204800, 409600, 819200, 1638400, 3276800};
+	{1,	  2,   4,   5,    7,   10,   12,    16,    18,    20,     22,     24,     24,     24,      24,      24},  /*UVNRThreshold*/
+	{0,	  0,   0,   0,	  0, 	0,    0,     0,     0,	   1,      1,      2,      2,      2,       2,       2},  /*Coring_lutLimit*/
+	{0,	  0,   0,  16,   34,   34,   34,    34,    34,    34,     34,     34,     34,     34,      34,      34}   /*UVNR_blendRatio*/
+};
+
+static ISP_CMOS_DPC_S g_stCmosDpc = 
+{
+	//0,/*IR_channel*/
+	//0,/*IR_position*/
+	{70,150,240,248,250,252,252,252,252,252,252,252,252,252,252,252},/*au16Strength[16]*/
+	{0,0,0,0,0,0,0,0x30,0x60,0x80,0x80,0x80,0xE5,0xE5,0xE5,0xE5},/*au16BlendRatio[16]*/
+};
+
+//#define HI_ISP_LSC_LIGHT_NUM 3
+
+static ISP_LSC_CABLI_UNI_TABLE_S g_stCmosLscUniTable = 
+{
+	/* Mesh Grid Info: Width */
+	{14, 20, 27, 38, 54, 75, 105, 147},
+	/* Mesh Grid Info: Height */
+	{8, 11, 15, 22, 30, 42, 59, 83},
+};
+
+static ISP_LSC_CABLI_TABLE_S g_stCmosLscTable[HI_ISP_LSC_LIGHT_NUM] = 
+{
+	/* Light Source 1 */
+	{
+		/* AWB RGain */
+		256,
+		/* AWB BGain */
+		256,
+		/* Channel R */
+		{   
+			24469606, 23720979, 22341675, 20676829, 18869687, 16739138, 14805759, 13096654, 12654238, 14232984, 16793429, 19911729, 22781759, 25597758, 28466352, 31122941, 32540272,
+			24307722, 23572504, 22226102, 20599010, 18780023, 16690370, 14716558, 13048395, 12588601, 14144045, 16705589, 19836792, 22654984, 25442599, 28275812, 30975307, 32302008,              
+			23933708, 23228582, 21920911, 20292256, 18463780, 16476571, 14477740, 12856638, 12396294, 13913138, 16448833, 19532258, 22338837, 25086701, 27680366, 30312245, 31554958,              
+			23397827, 22699527, 21413450, 19795635, 18022859, 16057464, 14140785, 12511821, 12077410, 13580348, 15998017, 19028729, 21837984, 24441155, 26880352, 29282507, 30560858,              
+			22554460, 21938594, 20736069, 19208430, 17475060, 15545286, 13691390, 12089171, 11657092, 13113483, 15539654, 18309810, 21076681, 23637451, 25912169, 28183376, 29275033,              
+			21795045, 21178881, 19927296, 18478071, 16822771, 14994941, 13147958, 11606626, 11176966, 12633694, 14938645, 17628676, 20374299, 22801943, 24892479, 26837693, 27774935,              
+			20855079, 20208472, 19030170, 17661781, 16047209, 14301152, 12524146, 11023221, 10589695, 12035507, 14324603, 16874800, 19474296, 21803782, 23881493, 25597386, 26418828,              
+			20008380, 19464525, 18307650, 17080972, 15516028, 13835320, 12066445, 10556410, 10144626, 11588679, 13814563, 16304677, 18777216, 21097582, 23022524, 24710149, 25415514,              
+			19671862, 19096430, 17983850, 16716069, 15236259, 13578636, 11857824, 10367097, 10000000, 11381149, 13641301, 16114944, 18537864, 20760710, 22707733, 24357097, 25099709,              
+			20332059, 19866819, 18727363, 17378820, 15886169, 14223468, 12288316, 10797634, 10374619, 11913084, 14231026, 16706594, 19313900, 21611765, 23569871, 25253965, 26057416,              
+			21456032, 20917751, 19761086, 18363276, 16924273, 14981061, 12987306, 11495536, 11089646, 12626861, 15015552, 17661190, 20300454, 22814563, 24946383, 26708225, 27559493,              
+			22360611, 21678362, 20477332, 19066411, 17351901, 15489517, 13676591, 12143874, 11737692, 13263807, 15787109, 18530572, 21331465, 23991933, 26192724, 28474648, 29979998,              
+			23466613, 22844394, 21459173, 19873928, 18165201, 16272595, 14375849, 12783684, 12371674, 13936364, 16539635, 19374894, 22332974, 25116078, 27557910, 30172012, 32035470,              
+			25300467, 24281657, 22462280, 20713601, 18921862, 16902640, 14965084, 13354112, 12857452, 14457746, 17135336, 20086609, 23192233, 26086662, 28799015, 31458442, 32896948,              
+			26455920, 25718164, 23492526, 21405197, 19367782, 17368580, 15401440, 13743709, 13198411, 14859800, 17562135, 20611241, 23835964, 26849575, 29712404, 32575632, 33956815,              
+			26916280, 26458971, 24416272, 21910443, 19716263, 17650024, 15645870, 13955237, 13409808, 15088551, 17849999, 20928122, 24197470, 27393087, 30393790, 33447928, 34831526,              
+			27172727, 26706468, 24830976, 22105512, 19902190, 17772197, 15726314, 14006992, 13493280, 15172422, 17966703, 21097329, 24350464, 27611270, 30719754, 33804523, 35216993,          
+		},         /* Channel Gr */
+		{             
+			24322551, 23607750, 22227626, 20583881, 18717030, 16618980, 14639071, 13003850, 12543909, 13996237, 16462586, 19456038, 22234295, 24936364, 27738448, 30551778, 31830837,              
+			24259558, 23521142, 22139283, 20498478, 18642343, 16558584, 14604367, 12965486, 12485770, 13957962, 16405954, 19367604, 22153298, 24833551, 27573017, 30387936, 31634219,              
+			23969926, 23191640, 21843648, 20201451, 18374035, 16329578, 14401034, 12780016, 12304439, 13770986, 16196551, 19081596, 21833994, 24433483, 27043873, 29733973, 30989660,              
+			23321362, 22629273, 21334052, 19696901, 17965424, 15986608, 14063838, 12456861, 11978980, 13418648, 15778019, 18612277, 21315102, 23809712, 26226064, 28654836, 29858116,              
+			22555336, 21917624, 20655765, 19148058, 17391502, 15531538, 13647074, 12048192, 11627051, 13017555, 15323982, 17910172, 20632818, 23146545, 25285450, 27491089, 28613293,              
+			21741866, 21128148, 19894514, 18472053, 16836260, 14971459, 13169920, 11587714, 11124067, 12578747, 14836289, 17360307, 19929132, 22384016, 24355466, 26331949, 27352815,              
+			20805802, 20185106, 19014015, 17664079, 16081771, 14329754, 12542889, 11043684, 10566584, 12013248, 14217230, 16668342, 19167674, 21446575, 23383188, 25032984, 25886305,              
+			20112548, 19493115, 18363055, 17070739, 15581289, 13856944, 12100187, 10589247, 10148051, 11573237, 13737151, 16141111, 18583815, 20733781, 22569815, 24296752, 25046089,              
+			19664107, 19108270, 18032022, 16754498, 15293413, 13625402, 11863806, 10396376, 10000000, 11390542, 13566687, 15968371, 18326815, 20466621, 22380570, 23941759, 24695547,              
+			20287223, 19863565, 18746273, 17416908, 15901825, 14294040, 12321648, 10818315, 10385335, 11902925, 14155887, 16571798, 19027991, 21280718, 23190572, 24913024, 25772275,              
+			21417286, 20902572, 19756979, 18350751, 16960125, 15006293, 13015493, 11528370, 11123691, 12615401, 14924695, 17459026, 20049972, 22309563, 24449447, 26213695, 27116633,              
+			22319707, 21649086, 20425696, 19013250, 17305262, 15494607, 13702786, 12165503, 11736905, 13244824, 15603417, 18262304, 20996047, 23526120, 25796902, 27839483, 29337913,              
+			23401938, 22768733, 21399945, 19847293, 18127981, 16259085, 14379940, 12789270, 12324058, 13840300, 16352894, 19006318, 21961307, 24552526, 26975929, 29590921, 31446555,              
+			25216199, 24186515, 22416609, 20559975, 18774023, 16842412, 14955523, 13308579, 12788037, 14353917, 16910610, 19735727, 22726496, 25469131, 28122339, 30876621, 32394907,              
+			26425752, 25692299, 23449707, 21307411, 19322701, 17289351, 15345385, 13641262, 13127743, 14668899, 17272640, 20148896, 23303676, 26185364, 29058890, 32029508, 33488213,              
+			26935460, 26397790, 24393034, 21779327, 19576514, 17506698, 15516554, 13811244, 13273711, 14863215, 17508645, 20499090, 23703766, 26622314, 29746727, 32730996, 34235648,              
+			27143801, 26590847, 24812683, 21906953, 19647547, 17622117, 15547926, 13863170, 13312188, 14961118, 17605535, 20656386, 23845916, 26784281, 30001031, 33073843, 34580679,          
+		},         /* Channel Gb */
+		{             
+			24408043, 23717605, 22219471, 20650835, 18700332, 16626421, 14616590, 13009307, 12560256, 14050942, 16530521, 19519502, 22352472, 25003932, 28001835, 30825891, 32241582,              
+			24289225, 23576876, 22117756, 20549432, 18635832, 16558973, 14561240, 12955535, 12502191, 14005492, 16475687, 19454892, 22253173, 24954941, 27845564, 30619403, 31986633,              
+			23965558, 23238267, 21827613, 20240688, 18396583, 16356682, 14380798, 12771189, 12322947, 13802280, 16217014, 19199079, 21992850, 24652704, 27269477, 29964807, 31278212,              
+			23349717, 22687356, 21302421, 19751868, 17987221, 16007175, 14061405, 12451607, 11993686, 13428204, 15830471, 18686500, 21462128, 24019507, 26386583, 28847840, 30053693,              
+			22726148, 21993167, 20765106, 19207248, 17468047, 15534971, 13673275, 12074207, 11636909, 13053178, 15407996, 18063326, 20850631, 23318600, 25582892, 27831343, 29012728,              
+			21785788, 21165017, 19954593, 18490753, 16849612, 14974640, 13189414, 11610610, 11162826, 12595072, 14884596, 17417201, 20080436, 22502197, 24628511, 26639593, 27617551,              
+			20835370, 20219981, 19060694, 17718235, 16096573, 14333219, 12567022, 11056971, 10576684, 12017585, 14273366, 16736795, 19259373, 21622042, 23638605, 25297940, 26103811,              
+			20195466, 19565256, 18420703, 17099701, 15573373, 13859146, 12122690, 10590926, 10168797, 11622213, 13794094, 16227259, 18723693, 20930602, 22856877, 24492908, 25265768,              
+			19682717, 19124913, 18064053, 16805221, 15303007, 13650987, 11888147, 10387062, 10000000, 11410081, 13625217, 16017594, 18440204, 20612392, 22525983, 24121729, 24825178,              
+			20315770, 19811881, 18746559, 17375787, 15863256, 14251236, 12299960, 10789173, 10381705, 11902187, 14181379, 16640056, 19115712, 21392019, 23325017, 25055256, 25906054,              
+			21461645, 20864944, 19757751, 18411278, 16913264, 14992119, 12966236, 11495823, 11081141, 12615587, 14949170, 17501709, 20132526, 22476408, 24592705, 26461998, 27453668,              
+			22312333, 21645415, 20387924, 18943790, 17286180, 15443365, 13644297, 12090472, 11700876, 13223637, 15628085, 18281919, 21097474, 23672272, 25889351, 28124159, 29645072,              
+			23383784, 22729060, 21318076, 19781214, 18026833, 16158623, 14298485, 12696206, 12302757, 13835997, 16345467, 19075945, 22027012, 24751241, 27139391, 29835552, 31720642,              
+			25099108, 24104581, 22334869, 20517599, 18710422, 16767400, 14899771, 13247748, 12775252, 14331577, 16906180, 19753454, 22788534, 25660853, 28284629, 31107441, 32593380,              
+			26349400, 25565489, 23356079, 21219116, 19217796, 17236891, 15271547, 13599787, 13077814, 14639364, 17277450, 20185848, 23326087, 26297810, 29168020, 32196272, 33605409,              
+			26930163, 26358777, 24228595, 21724743, 19516656, 17465808, 15470925, 13778250, 13240689, 14835160, 17464968, 20495330, 23681384, 26749812, 29871182, 32940277, 34447399,              
+			27269380, 26638849, 24565939, 21895834, 19613241, 17535177, 15544498, 13835571, 13304372, 14931791, 17559959, 20628778, 23851969, 26922846, 30208036, 33292458, 34784452,          
+		},         /* Channel B */
+		{   23371795, 22791368, 21618758, 20061976, 18252169, 16374985, 14443457, 12941188, 12541213, 13923564, 16233499, 18927419, 21461401, 23929051, 26502664, 28905421, 30037443,              
+			23330401, 22715138, 21523612, 19969510, 18189470, 16299151, 14396489, 12884044, 12482245, 13890553, 16142797, 18896683, 21428051, 23825834, 26342950, 28720861, 29948679,              
+			23086076, 22412093, 21188017, 19697882, 17991884, 16079406, 14233311, 12724449, 12320805, 13710685, 15912542, 18682516, 21198696, 23572967, 25845396, 28159089, 29356643,              
+			22599272, 21947123, 20695175, 19306675, 17604208, 15769605, 13954549, 12430150, 12063878, 13391837, 15609284, 18276928, 20744463, 23085623, 25170348, 27375539, 28396606,              
+			21840481, 21239683, 20107398, 18649497, 17060227, 15289289, 13508649, 12014327, 11643862, 12962241, 15189032, 17637587, 20125129, 22377427, 24329288, 26300590, 27404206,              
+			21000905, 20433755, 19306359, 17987487, 16453091, 14737765, 13008231, 11535779, 11147217, 12521691, 14657457, 17005732, 19399161, 21643552, 23497803, 25236911, 26163508,              
+			20112137, 19612065, 18493688, 17249849, 15729080, 14092821, 12449915, 11009447, 10612262, 11994235, 14107171, 16402537, 18680560, 20814126, 22599705, 24102621, 24824403,              
+			19389835, 18862542, 17889989, 16655870, 15261391, 13653617, 12002792, 10576159, 10193036, 11584529, 13653712, 15908673, 18188909, 20206486, 21927916, 23425073, 24120394,              
+			18918115, 18436188, 17465621, 16348569, 14939651, 13402445, 11764065, 10343261, 10000000, 11392972, 13488040, 15682412, 17909469, 19942456, 21618758, 23043071, 23665341,              
+			19467983, 19044346, 18058984, 16796842, 15462091, 13921194, 12138738, 10754572, 10363396, 11841689, 13999671, 16242903, 18554704, 20600614, 22357374, 23920885, 24640013,              
+			20401117, 19953201, 18922918, 17707763, 16383505, 14620662, 12776827, 11425403, 11062710, 12499177, 14704861, 17075416, 19484475, 21634247, 23497146, 25094506, 25925624,              
+			21132884, 20603786, 19525309, 18231146, 16737351, 15046162, 13413711, 12020361, 11670587, 13101197, 15377011, 17809903, 20342686, 22694913, 24688881, 26597960, 27893101,              
+			22156476, 21560575, 20350912, 18949104, 17409127, 15709944, 14043948, 12574209, 12206632, 13653047, 16012242, 18522718, 21185882, 23619016, 25770739, 28094731, 29735428,              
+			23698297, 22850540, 21215729, 19582518, 18037133, 16285447, 14585025, 13089489, 12693835, 14156929, 16561286, 19166718, 21952851, 24559643, 26924642, 29274471, 30543523,              
+			24684120, 24042882, 22129829, 20203990, 18467876, 16630232, 14917245, 13398999, 12969207, 14495156, 16899284, 19577309, 22460224, 25097501, 27665587, 30194866, 31502931,              
+			25049348, 24732851, 22945552, 20682454, 18721364, 16875890, 15109753, 13601891, 13180674, 14707836, 17155914, 19846470, 22824763, 25517885, 28188341, 30854826, 32232045,              
+			25231071, 25010937, 23252273, 20817953, 18791028, 16993855, 15194402, 13714613, 13298409, 14793714, 17294587, 19990527, 22991963, 25784845, 28430884, 31188721, 32607419,          
+		},   
+	},
+
+	/* Light Source 2 */ 
+	{
+		/* AWB RGain */
+		256,
+		/* AWB BGain */
+		256,
+		/* Channel R */
+		{   
+			24469606, 23720979, 22341675, 20676829, 18869687, 16739138, 14805759, 13096654, 12654238, 14232984, 16793429, 19911729, 22781759, 25597758, 28466352, 31122941, 32540272,
+			24307722, 23572504, 22226102, 20599010, 18780023, 16690370, 14716558, 13048395, 12588601, 14144045, 16705589, 19836792, 22654984, 25442599, 28275812, 30975307, 32302008,              
+			23933708, 23228582, 21920911, 20292256, 18463780, 16476571, 14477740, 12856638, 12396294, 13913138, 16448833, 19532258, 22338837, 25086701, 27680366, 30312245, 31554958,              
+			23397827, 22699527, 21413450, 19795635, 18022859, 16057464, 14140785, 12511821, 12077410, 13580348, 15998017, 19028729, 21837984, 24441155, 26880352, 29282507, 30560858,              
+			22554460, 21938594, 20736069, 19208430, 17475060, 15545286, 13691390, 12089171, 11657092, 13113483, 15539654, 18309810, 21076681, 23637451, 25912169, 28183376, 29275033,              
+			21795045, 21178881, 19927296, 18478071, 16822771, 14994941, 13147958, 11606626, 11176966, 12633694, 14938645, 17628676, 20374299, 22801943, 24892479, 26837693, 27774935,              
+			20855079, 20208472, 19030170, 17661781, 16047209, 14301152, 12524146, 11023221, 10589695, 12035507, 14324603, 16874800, 19474296, 21803782, 23881493, 25597386, 26418828,              
+			20008380, 19464525, 18307650, 17080972, 15516028, 13835320, 12066445, 10556410, 10144626, 11588679, 13814563, 16304677, 18777216, 21097582, 23022524, 24710149, 25415514,              
+			19671862, 19096430, 17983850, 16716069, 15236259, 13578636, 11857824, 10367097, 10000000, 11381149, 13641301, 16114944, 18537864, 20760710, 22707733, 24357097, 25099709,              
+			20332059, 19866819, 18727363, 17378820, 15886169, 14223468, 12288316, 10797634, 10374619, 11913084, 14231026, 16706594, 19313900, 21611765, 23569871, 25253965, 26057416,              
+			21456032, 20917751, 19761086, 18363276, 16924273, 14981061, 12987306, 11495536, 11089646, 12626861, 15015552, 17661190, 20300454, 22814563, 24946383, 26708225, 27559493,              
+			22360611, 21678362, 20477332, 19066411, 17351901, 15489517, 13676591, 12143874, 11737692, 13263807, 15787109, 18530572, 21331465, 23991933, 26192724, 28474648, 29979998,              
+			23466613, 22844394, 21459173, 19873928, 18165201, 16272595, 14375849, 12783684, 12371674, 13936364, 16539635, 19374894, 22332974, 25116078, 27557910, 30172012, 32035470,              
+			25300467, 24281657, 22462280, 20713601, 18921862, 16902640, 14965084, 13354112, 12857452, 14457746, 17135336, 20086609, 23192233, 26086662, 28799015, 31458442, 32896948,              
+			26455920, 25718164, 23492526, 21405197, 19367782, 17368580, 15401440, 13743709, 13198411, 14859800, 17562135, 20611241, 23835964, 26849575, 29712404, 32575632, 33956815,              
+			26916280, 26458971, 24416272, 21910443, 19716263, 17650024, 15645870, 13955237, 13409808, 15088551, 17849999, 20928122, 24197470, 27393087, 30393790, 33447928, 34831526,              
+			27172727, 26706468, 24830976, 22105512, 19902190, 17772197, 15726314, 14006992, 13493280, 15172422, 17966703, 21097329, 24350464, 27611270, 30719754, 33804523, 35216993,          
+		},         /* Channel Gr */
+		{             
+			24322551, 23607750, 22227626, 20583881, 18717030, 16618980, 14639071, 13003850, 12543909, 13996237, 16462586, 19456038, 22234295, 24936364, 27738448, 30551778, 31830837,              
+			24259558, 23521142, 22139283, 20498478, 18642343, 16558584, 14604367, 12965486, 12485770, 13957962, 16405954, 19367604, 22153298, 24833551, 27573017, 30387936, 31634219,              
+			23969926, 23191640, 21843648, 20201451, 18374035, 16329578, 14401034, 12780016, 12304439, 13770986, 16196551, 19081596, 21833994, 24433483, 27043873, 29733973, 30989660,              
+			23321362, 22629273, 21334052, 19696901, 17965424, 15986608, 14063838, 12456861, 11978980, 13418648, 15778019, 18612277, 21315102, 23809712, 26226064, 28654836, 29858116,              
+			22555336, 21917624, 20655765, 19148058, 17391502, 15531538, 13647074, 12048192, 11627051, 13017555, 15323982, 17910172, 20632818, 23146545, 25285450, 27491089, 28613293,              
+			21741866, 21128148, 19894514, 18472053, 16836260, 14971459, 13169920, 11587714, 11124067, 12578747, 14836289, 17360307, 19929132, 22384016, 24355466, 26331949, 27352815,              
+			20805802, 20185106, 19014015, 17664079, 16081771, 14329754, 12542889, 11043684, 10566584, 12013248, 14217230, 16668342, 19167674, 21446575, 23383188, 25032984, 25886305,              
+			20112548, 19493115, 18363055, 17070739, 15581289, 13856944, 12100187, 10589247, 10148051, 11573237, 13737151, 16141111, 18583815, 20733781, 22569815, 24296752, 25046089,              
+			19664107, 19108270, 18032022, 16754498, 15293413, 13625402, 11863806, 10396376, 10000000, 11390542, 13566687, 15968371, 18326815, 20466621, 22380570, 23941759, 24695547,              
+			20287223, 19863565, 18746273, 17416908, 15901825, 14294040, 12321648, 10818315, 10385335, 11902925, 14155887, 16571798, 19027991, 21280718, 23190572, 24913024, 25772275,              
+			21417286, 20902572, 19756979, 18350751, 16960125, 15006293, 13015493, 11528370, 11123691, 12615401, 14924695, 17459026, 20049972, 22309563, 24449447, 26213695, 27116633,              
+			22319707, 21649086, 20425696, 19013250, 17305262, 15494607, 13702786, 12165503, 11736905, 13244824, 15603417, 18262304, 20996047, 23526120, 25796902, 27839483, 29337913,              
+			23401938, 22768733, 21399945, 19847293, 18127981, 16259085, 14379940, 12789270, 12324058, 13840300, 16352894, 19006318, 21961307, 24552526, 26975929, 29590921, 31446555,              
+			25216199, 24186515, 22416609, 20559975, 18774023, 16842412, 14955523, 13308579, 12788037, 14353917, 16910610, 19735727, 22726496, 25469131, 28122339, 30876621, 32394907,              
+			26425752, 25692299, 23449707, 21307411, 19322701, 17289351, 15345385, 13641262, 13127743, 14668899, 17272640, 20148896, 23303676, 26185364, 29058890, 32029508, 33488213,              
+			26935460, 26397790, 24393034, 21779327, 19576514, 17506698, 15516554, 13811244, 13273711, 14863215, 17508645, 20499090, 23703766, 26622314, 29746727, 32730996, 34235648,              
+			27143801, 26590847, 24812683, 21906953, 19647547, 17622117, 15547926, 13863170, 13312188, 14961118, 17605535, 20656386, 23845916, 26784281, 30001031, 33073843, 34580679,          
+		},         /* Channel Gb */
+		{             
+			24408043, 23717605, 22219471, 20650835, 18700332, 16626421, 14616590, 13009307, 12560256, 14050942, 16530521, 19519502, 22352472, 25003932, 28001835, 30825891, 32241582,              
+			24289225, 23576876, 22117756, 20549432, 18635832, 16558973, 14561240, 12955535, 12502191, 14005492, 16475687, 19454892, 22253173, 24954941, 27845564, 30619403, 31986633,              
+			23965558, 23238267, 21827613, 20240688, 18396583, 16356682, 14380798, 12771189, 12322947, 13802280, 16217014, 19199079, 21992850, 24652704, 27269477, 29964807, 31278212,              
+			23349717, 22687356, 21302421, 19751868, 17987221, 16007175, 14061405, 12451607, 11993686, 13428204, 15830471, 18686500, 21462128, 24019507, 26386583, 28847840, 30053693,              
+			22726148, 21993167, 20765106, 19207248, 17468047, 15534971, 13673275, 12074207, 11636909, 13053178, 15407996, 18063326, 20850631, 23318600, 25582892, 27831343, 29012728,              
+			21785788, 21165017, 19954593, 18490753, 16849612, 14974640, 13189414, 11610610, 11162826, 12595072, 14884596, 17417201, 20080436, 22502197, 24628511, 26639593, 27617551,              
+			20835370, 20219981, 19060694, 17718235, 16096573, 14333219, 12567022, 11056971, 10576684, 12017585, 14273366, 16736795, 19259373, 21622042, 23638605, 25297940, 26103811,              
+			20195466, 19565256, 18420703, 17099701, 15573373, 13859146, 12122690, 10590926, 10168797, 11622213, 13794094, 16227259, 18723693, 20930602, 22856877, 24492908, 25265768,              
+			19682717, 19124913, 18064053, 16805221, 15303007, 13650987, 11888147, 10387062, 10000000, 11410081, 13625217, 16017594, 18440204, 20612392, 22525983, 24121729, 24825178,              
+			20315770, 19811881, 18746559, 17375787, 15863256, 14251236, 12299960, 10789173, 10381705, 11902187, 14181379, 16640056, 19115712, 21392019, 23325017, 25055256, 25906054,              
+			21461645, 20864944, 19757751, 18411278, 16913264, 14992119, 12966236, 11495823, 11081141, 12615587, 14949170, 17501709, 20132526, 22476408, 24592705, 26461998, 27453668,              
+			22312333, 21645415, 20387924, 18943790, 17286180, 15443365, 13644297, 12090472, 11700876, 13223637, 15628085, 18281919, 21097474, 23672272, 25889351, 28124159, 29645072,              
+			23383784, 22729060, 21318076, 19781214, 18026833, 16158623, 14298485, 12696206, 12302757, 13835997, 16345467, 19075945, 22027012, 24751241, 27139391, 29835552, 31720642,              
+			25099108, 24104581, 22334869, 20517599, 18710422, 16767400, 14899771, 13247748, 12775252, 14331577, 16906180, 19753454, 22788534, 25660853, 28284629, 31107441, 32593380,              
+			26349400, 25565489, 23356079, 21219116, 19217796, 17236891, 15271547, 13599787, 13077814, 14639364, 17277450, 20185848, 23326087, 26297810, 29168020, 32196272, 33605409,              
+			26930163, 26358777, 24228595, 21724743, 19516656, 17465808, 15470925, 13778250, 13240689, 14835160, 17464968, 20495330, 23681384, 26749812, 29871182, 32940277, 34447399,              
+			27269380, 26638849, 24565939, 21895834, 19613241, 17535177, 15544498, 13835571, 13304372, 14931791, 17559959, 20628778, 23851969, 26922846, 30208036, 33292458, 34784452,          
+		},         /* Channel B */
+		{   23371795, 22791368, 21618758, 20061976, 18252169, 16374985, 14443457, 12941188, 12541213, 13923564, 16233499, 18927419, 21461401, 23929051, 26502664, 28905421, 30037443,              
+			23330401, 22715138, 21523612, 19969510, 18189470, 16299151, 14396489, 12884044, 12482245, 13890553, 16142797, 18896683, 21428051, 23825834, 26342950, 28720861, 29948679,              
+			23086076, 22412093, 21188017, 19697882, 17991884, 16079406, 14233311, 12724449, 12320805, 13710685, 15912542, 18682516, 21198696, 23572967, 25845396, 28159089, 29356643,              
+			22599272, 21947123, 20695175, 19306675, 17604208, 15769605, 13954549, 12430150, 12063878, 13391837, 15609284, 18276928, 20744463, 23085623, 25170348, 27375539, 28396606,              
+			21840481, 21239683, 20107398, 18649497, 17060227, 15289289, 13508649, 12014327, 11643862, 12962241, 15189032, 17637587, 20125129, 22377427, 24329288, 26300590, 27404206,              
+			21000905, 20433755, 19306359, 17987487, 16453091, 14737765, 13008231, 11535779, 11147217, 12521691, 14657457, 17005732, 19399161, 21643552, 23497803, 25236911, 26163508,              
+			20112137, 19612065, 18493688, 17249849, 15729080, 14092821, 12449915, 11009447, 10612262, 11994235, 14107171, 16402537, 18680560, 20814126, 22599705, 24102621, 24824403,              
+			19389835, 18862542, 17889989, 16655870, 15261391, 13653617, 12002792, 10576159, 10193036, 11584529, 13653712, 15908673, 18188909, 20206486, 21927916, 23425073, 24120394,              
+			18918115, 18436188, 17465621, 16348569, 14939651, 13402445, 11764065, 10343261, 10000000, 11392972, 13488040, 15682412, 17909469, 19942456, 21618758, 23043071, 23665341,              
+			19467983, 19044346, 18058984, 16796842, 15462091, 13921194, 12138738, 10754572, 10363396, 11841689, 13999671, 16242903, 18554704, 20600614, 22357374, 23920885, 24640013,              
+			20401117, 19953201, 18922918, 17707763, 16383505, 14620662, 12776827, 11425403, 11062710, 12499177, 14704861, 17075416, 19484475, 21634247, 23497146, 25094506, 25925624,              
+			21132884, 20603786, 19525309, 18231146, 16737351, 15046162, 13413711, 12020361, 11670587, 13101197, 15377011, 17809903, 20342686, 22694913, 24688881, 26597960, 27893101,              
+			22156476, 21560575, 20350912, 18949104, 17409127, 15709944, 14043948, 12574209, 12206632, 13653047, 16012242, 18522718, 21185882, 23619016, 25770739, 28094731, 29735428,              
+			23698297, 22850540, 21215729, 19582518, 18037133, 16285447, 14585025, 13089489, 12693835, 14156929, 16561286, 19166718, 21952851, 24559643, 26924642, 29274471, 30543523,              
+			24684120, 24042882, 22129829, 20203990, 18467876, 16630232, 14917245, 13398999, 12969207, 14495156, 16899284, 19577309, 22460224, 25097501, 27665587, 30194866, 31502931,              
+			25049348, 24732851, 22945552, 20682454, 18721364, 16875890, 15109753, 13601891, 13180674, 14707836, 17155914, 19846470, 22824763, 25517885, 28188341, 30854826, 32232045,              
+			25231071, 25010937, 23252273, 20817953, 18791028, 16993855, 15194402, 13714613, 13298409, 14793714, 17294587, 19990527, 22991963, 25784845, 28430884, 31188721, 32607419,          
+		},   
+	},
+
+
+	/* Light Source 3 */
+	{
+		/* AWB RGain */
+		256,
+		/* AWB BGain */
+		256,
+		/* Channel R */
+		{   
+			24469606, 23720979, 22341675, 20676829, 18869687, 16739138, 14805759, 13096654, 12654238, 14232984, 16793429, 19911729, 22781759, 25597758, 28466352, 31122941, 32540272,
+			24307722, 23572504, 22226102, 20599010, 18780023, 16690370, 14716558, 13048395, 12588601, 14144045, 16705589, 19836792, 22654984, 25442599, 28275812, 30975307, 32302008,              
+			23933708, 23228582, 21920911, 20292256, 18463780, 16476571, 14477740, 12856638, 12396294, 13913138, 16448833, 19532258, 22338837, 25086701, 27680366, 30312245, 31554958,              
+			23397827, 22699527, 21413450, 19795635, 18022859, 16057464, 14140785, 12511821, 12077410, 13580348, 15998017, 19028729, 21837984, 24441155, 26880352, 29282507, 30560858,              
+			22554460, 21938594, 20736069, 19208430, 17475060, 15545286, 13691390, 12089171, 11657092, 13113483, 15539654, 18309810, 21076681, 23637451, 25912169, 28183376, 29275033,              
+			21795045, 21178881, 19927296, 18478071, 16822771, 14994941, 13147958, 11606626, 11176966, 12633694, 14938645, 17628676, 20374299, 22801943, 24892479, 26837693, 27774935,              
+			20855079, 20208472, 19030170, 17661781, 16047209, 14301152, 12524146, 11023221, 10589695, 12035507, 14324603, 16874800, 19474296, 21803782, 23881493, 25597386, 26418828,              
+			20008380, 19464525, 18307650, 17080972, 15516028, 13835320, 12066445, 10556410, 10144626, 11588679, 13814563, 16304677, 18777216, 21097582, 23022524, 24710149, 25415514,              
+			19671862, 19096430, 17983850, 16716069, 15236259, 13578636, 11857824, 10367097, 10000000, 11381149, 13641301, 16114944, 18537864, 20760710, 22707733, 24357097, 25099709,              
+			20332059, 19866819, 18727363, 17378820, 15886169, 14223468, 12288316, 10797634, 10374619, 11913084, 14231026, 16706594, 19313900, 21611765, 23569871, 25253965, 26057416,              
+			21456032, 20917751, 19761086, 18363276, 16924273, 14981061, 12987306, 11495536, 11089646, 12626861, 15015552, 17661190, 20300454, 22814563, 24946383, 26708225, 27559493,              
+			22360611, 21678362, 20477332, 19066411, 17351901, 15489517, 13676591, 12143874, 11737692, 13263807, 15787109, 18530572, 21331465, 23991933, 26192724, 28474648, 29979998,              
+			23466613, 22844394, 21459173, 19873928, 18165201, 16272595, 14375849, 12783684, 12371674, 13936364, 16539635, 19374894, 22332974, 25116078, 27557910, 30172012, 32035470,              
+			25300467, 24281657, 22462280, 20713601, 18921862, 16902640, 14965084, 13354112, 12857452, 14457746, 17135336, 20086609, 23192233, 26086662, 28799015, 31458442, 32896948,              
+			26455920, 25718164, 23492526, 21405197, 19367782, 17368580, 15401440, 13743709, 13198411, 14859800, 17562135, 20611241, 23835964, 26849575, 29712404, 32575632, 33956815,              
+			26916280, 26458971, 24416272, 21910443, 19716263, 17650024, 15645870, 13955237, 13409808, 15088551, 17849999, 20928122, 24197470, 27393087, 30393790, 33447928, 34831526,              
+			27172727, 26706468, 24830976, 22105512, 19902190, 17772197, 15726314, 14006992, 13493280, 15172422, 17966703, 21097329, 24350464, 27611270, 30719754, 33804523, 35216993,          
+		},         /* Channel Gr */
+		{             
+			24322551, 23607750, 22227626, 20583881, 18717030, 16618980, 14639071, 13003850, 12543909, 13996237, 16462586, 19456038, 22234295, 24936364, 27738448, 30551778, 31830837,              
+			24259558, 23521142, 22139283, 20498478, 18642343, 16558584, 14604367, 12965486, 12485770, 13957962, 16405954, 19367604, 22153298, 24833551, 27573017, 30387936, 31634219,              
+			23969926, 23191640, 21843648, 20201451, 18374035, 16329578, 14401034, 12780016, 12304439, 13770986, 16196551, 19081596, 21833994, 24433483, 27043873, 29733973, 30989660,              
+			23321362, 22629273, 21334052, 19696901, 17965424, 15986608, 14063838, 12456861, 11978980, 13418648, 15778019, 18612277, 21315102, 23809712, 26226064, 28654836, 29858116,              
+			22555336, 21917624, 20655765, 19148058, 17391502, 15531538, 13647074, 12048192, 11627051, 13017555, 15323982, 17910172, 20632818, 23146545, 25285450, 27491089, 28613293,              
+			21741866, 21128148, 19894514, 18472053, 16836260, 14971459, 13169920, 11587714, 11124067, 12578747, 14836289, 17360307, 19929132, 22384016, 24355466, 26331949, 27352815,              
+			20805802, 20185106, 19014015, 17664079, 16081771, 14329754, 12542889, 11043684, 10566584, 12013248, 14217230, 16668342, 19167674, 21446575, 23383188, 25032984, 25886305,              
+			20112548, 19493115, 18363055, 17070739, 15581289, 13856944, 12100187, 10589247, 10148051, 11573237, 13737151, 16141111, 18583815, 20733781, 22569815, 24296752, 25046089,              
+			19664107, 19108270, 18032022, 16754498, 15293413, 13625402, 11863806, 10396376, 10000000, 11390542, 13566687, 15968371, 18326815, 20466621, 22380570, 23941759, 24695547,              
+			20287223, 19863565, 18746273, 17416908, 15901825, 14294040, 12321648, 10818315, 10385335, 11902925, 14155887, 16571798, 19027991, 21280718, 23190572, 24913024, 25772275,              
+			21417286, 20902572, 19756979, 18350751, 16960125, 15006293, 13015493, 11528370, 11123691, 12615401, 14924695, 17459026, 20049972, 22309563, 24449447, 26213695, 27116633,              
+			22319707, 21649086, 20425696, 19013250, 17305262, 15494607, 13702786, 12165503, 11736905, 13244824, 15603417, 18262304, 20996047, 23526120, 25796902, 27839483, 29337913,              
+			23401938, 22768733, 21399945, 19847293, 18127981, 16259085, 14379940, 12789270, 12324058, 13840300, 16352894, 19006318, 21961307, 24552526, 26975929, 29590921, 31446555,              
+			25216199, 24186515, 22416609, 20559975, 18774023, 16842412, 14955523, 13308579, 12788037, 14353917, 16910610, 19735727, 22726496, 25469131, 28122339, 30876621, 32394907,              
+			26425752, 25692299, 23449707, 21307411, 19322701, 17289351, 15345385, 13641262, 13127743, 14668899, 17272640, 20148896, 23303676, 26185364, 29058890, 32029508, 33488213,              
+			26935460, 26397790, 24393034, 21779327, 19576514, 17506698, 15516554, 13811244, 13273711, 14863215, 17508645, 20499090, 23703766, 26622314, 29746727, 32730996, 34235648,              
+			27143801, 26590847, 24812683, 21906953, 19647547, 17622117, 15547926, 13863170, 13312188, 14961118, 17605535, 20656386, 23845916, 26784281, 30001031, 33073843, 34580679,          
+		},         /* Channel Gb */
+		{             
+			24408043, 23717605, 22219471, 20650835, 18700332, 16626421, 14616590, 13009307, 12560256, 14050942, 16530521, 19519502, 22352472, 25003932, 28001835, 30825891, 32241582,              
+			24289225, 23576876, 22117756, 20549432, 18635832, 16558973, 14561240, 12955535, 12502191, 14005492, 16475687, 19454892, 22253173, 24954941, 27845564, 30619403, 31986633,              
+			23965558, 23238267, 21827613, 20240688, 18396583, 16356682, 14380798, 12771189, 12322947, 13802280, 16217014, 19199079, 21992850, 24652704, 27269477, 29964807, 31278212,              
+			23349717, 22687356, 21302421, 19751868, 17987221, 16007175, 14061405, 12451607, 11993686, 13428204, 15830471, 18686500, 21462128, 24019507, 26386583, 28847840, 30053693,              
+			22726148, 21993167, 20765106, 19207248, 17468047, 15534971, 13673275, 12074207, 11636909, 13053178, 15407996, 18063326, 20850631, 23318600, 25582892, 27831343, 29012728,              
+			21785788, 21165017, 19954593, 18490753, 16849612, 14974640, 13189414, 11610610, 11162826, 12595072, 14884596, 17417201, 20080436, 22502197, 24628511, 26639593, 27617551,              
+			20835370, 20219981, 19060694, 17718235, 16096573, 14333219, 12567022, 11056971, 10576684, 12017585, 14273366, 16736795, 19259373, 21622042, 23638605, 25297940, 26103811,              
+			20195466, 19565256, 18420703, 17099701, 15573373, 13859146, 12122690, 10590926, 10168797, 11622213, 13794094, 16227259, 18723693, 20930602, 22856877, 24492908, 25265768,              
+			19682717, 19124913, 18064053, 16805221, 15303007, 13650987, 11888147, 10387062, 10000000, 11410081, 13625217, 16017594, 18440204, 20612392, 22525983, 24121729, 24825178,              
+			20315770, 19811881, 18746559, 17375787, 15863256, 14251236, 12299960, 10789173, 10381705, 11902187, 14181379, 16640056, 19115712, 21392019, 23325017, 25055256, 25906054,              
+			21461645, 20864944, 19757751, 18411278, 16913264, 14992119, 12966236, 11495823, 11081141, 12615587, 14949170, 17501709, 20132526, 22476408, 24592705, 26461998, 27453668,              
+			22312333, 21645415, 20387924, 18943790, 17286180, 15443365, 13644297, 12090472, 11700876, 13223637, 15628085, 18281919, 21097474, 23672272, 25889351, 28124159, 29645072,              
+			23383784, 22729060, 21318076, 19781214, 18026833, 16158623, 14298485, 12696206, 12302757, 13835997, 16345467, 19075945, 22027012, 24751241, 27139391, 29835552, 31720642,              
+			25099108, 24104581, 22334869, 20517599, 18710422, 16767400, 14899771, 13247748, 12775252, 14331577, 16906180, 19753454, 22788534, 25660853, 28284629, 31107441, 32593380,              
+			26349400, 25565489, 23356079, 21219116, 19217796, 17236891, 15271547, 13599787, 13077814, 14639364, 17277450, 20185848, 23326087, 26297810, 29168020, 32196272, 33605409,              
+			26930163, 26358777, 24228595, 21724743, 19516656, 17465808, 15470925, 13778250, 13240689, 14835160, 17464968, 20495330, 23681384, 26749812, 29871182, 32940277, 34447399,              
+			27269380, 26638849, 24565939, 21895834, 19613241, 17535177, 15544498, 13835571, 13304372, 14931791, 17559959, 20628778, 23851969, 26922846, 30208036, 33292458, 34784452,          
+		},         /* Channel B */
+		{   23371795, 22791368, 21618758, 20061976, 18252169, 16374985, 14443457, 12941188, 12541213, 13923564, 16233499, 18927419, 21461401, 23929051, 26502664, 28905421, 30037443,              
+			23330401, 22715138, 21523612, 19969510, 18189470, 16299151, 14396489, 12884044, 12482245, 13890553, 16142797, 18896683, 21428051, 23825834, 26342950, 28720861, 29948679,              
+			23086076, 22412093, 21188017, 19697882, 17991884, 16079406, 14233311, 12724449, 12320805, 13710685, 15912542, 18682516, 21198696, 23572967, 25845396, 28159089, 29356643,              
+			22599272, 21947123, 20695175, 19306675, 17604208, 15769605, 13954549, 12430150, 12063878, 13391837, 15609284, 18276928, 20744463, 23085623, 25170348, 27375539, 28396606,              
+			21840481, 21239683, 20107398, 18649497, 17060227, 15289289, 13508649, 12014327, 11643862, 12962241, 15189032, 17637587, 20125129, 22377427, 24329288, 26300590, 27404206,              
+			21000905, 20433755, 19306359, 17987487, 16453091, 14737765, 13008231, 11535779, 11147217, 12521691, 14657457, 17005732, 19399161, 21643552, 23497803, 25236911, 26163508,              
+			20112137, 19612065, 18493688, 17249849, 15729080, 14092821, 12449915, 11009447, 10612262, 11994235, 14107171, 16402537, 18680560, 20814126, 22599705, 24102621, 24824403,              
+			19389835, 18862542, 17889989, 16655870, 15261391, 13653617, 12002792, 10576159, 10193036, 11584529, 13653712, 15908673, 18188909, 20206486, 21927916, 23425073, 24120394,              
+			18918115, 18436188, 17465621, 16348569, 14939651, 13402445, 11764065, 10343261, 10000000, 11392972, 13488040, 15682412, 17909469, 19942456, 21618758, 23043071, 23665341,              
+			19467983, 19044346, 18058984, 16796842, 15462091, 13921194, 12138738, 10754572, 10363396, 11841689, 13999671, 16242903, 18554704, 20600614, 22357374, 23920885, 24640013,              
+			20401117, 19953201, 18922918, 17707763, 16383505, 14620662, 12776827, 11425403, 11062710, 12499177, 14704861, 17075416, 19484475, 21634247, 23497146, 25094506, 25925624,              
+			21132884, 20603786, 19525309, 18231146, 16737351, 15046162, 13413711, 12020361, 11670587, 13101197, 15377011, 17809903, 20342686, 22694913, 24688881, 26597960, 27893101,              
+			22156476, 21560575, 20350912, 18949104, 17409127, 15709944, 14043948, 12574209, 12206632, 13653047, 16012242, 18522718, 21185882, 23619016, 25770739, 28094731, 29735428,              
+			23698297, 22850540, 21215729, 19582518, 18037133, 16285447, 14585025, 13089489, 12693835, 14156929, 16561286, 19166718, 21952851, 24559643, 26924642, 29274471, 30543523,              
+			24684120, 24042882, 22129829, 20203990, 18467876, 16630232, 14917245, 13398999, 12969207, 14495156, 16899284, 19577309, 22460224, 25097501, 27665587, 30194866, 31502931,              
+			25049348, 24732851, 22945552, 20682454, 18721364, 16875890, 15109753, 13601891, 13180674, 14707836, 17155914, 19846470, 22824763, 25517885, 28188341, 30854826, 32232045,              
+			25231071, 25010937, 23252273, 20817953, 18791028, 16993855, 15194402, 13714613, 13298409, 14793714, 17294587, 19990527, 22991963, 25784845, 28430884, 31188721, 32607419,          
+		},   
+	},
+};
+
+
+
+static ISP_CMOS_DRC_S g_stIspDrc =
+{
+	0,
+	10,
+	0,
+	2,
+	192,
+	60,
+	0,
+	0,
+	0,
+	{1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024}
+};
+
+HI_U32 cmos_get_isp_default(ISP_CMOS_DEFAULT_S *pstDef)
+{   
+	if (HI_NULL == pstDef)
+	{
+		printf("null pointer when get isp default value!\n");
+		return -1;
+	}
+
+	memset(pstDef, 0, sizeof(ISP_CMOS_DEFAULT_S));
+
+	memcpy(&pstDef->stDrc, &g_stIspDrc, sizeof(ISP_CMOS_DRC_S));
+	memcpy(&pstDef->stDemosaic, &g_stIspDemosaic, sizeof(ISP_CMOS_DEMOSAIC_S));
+	memcpy(&pstDef->stGe, &g_stIspGe, sizeof(ISP_CMOS_GE_S));	
+	memcpy(&pstDef->stLsc.stLscUniParaTable, &g_stCmosLscUniTable, sizeof(ISP_LSC_CABLI_UNI_TABLE_S));
+	memcpy(&pstDef->stLsc.stLscParaTable[0], &g_stCmosLscTable[0], sizeof(ISP_LSC_CABLI_TABLE_S)*HI_ISP_LSC_LIGHT_NUM); 
+
+	pstDef->stNoiseTbl.stNrCaliPara.u8CalicoefRow = DMNR_CALIB_CARVE_NUM_SC2135;
+	pstDef->stNoiseTbl.stNrCaliPara.pCalibcoef    = (HI_FLOAT (*)[4])g_coef_calib_sc2135;
+	memcpy(&pstDef->stNoiseTbl.stIsoParaTable[0], &g_stNrIsoParaTab[0],sizeof(ISP_NR_ISO_PARA_TABLE_S)*HI_ISP_NR_ISO_LEVEL_MAX);
+
+	memcpy(&pstDef->stRgbSharpen, &g_stIspRgbSharpen, sizeof(ISP_CMOS_RGBSHARPEN_S));
+	memcpy(&pstDef->stUvnr,       &g_stIspUVNR,       sizeof(ISP_CMOS_UVNR_S));
+	memcpy(&pstDef->stDpc,       &g_stCmosDpc,       sizeof(ISP_CMOS_DPC_S));
+
+	pstDef->stSensorMaxResolution.u32MaxWidth  = 1920;
+	pstDef->stSensorMaxResolution.u32MaxHeight = 1080;
+
+	return 0;
+}
+
+
+HI_U32 cmos_get_isp_black_level(ISP_CMOS_BLACK_LEVEL_S *pstBlackLevel)
+{
+	// HI_S32  i;
+
+	if (HI_NULL == pstBlackLevel)
+	{
+		printf("null pointer when get isp black level value!\n");
+		return -1;
+	}
+
+	/* Don't need to update black level when iso change */
+	pstBlackLevel->bUpdate = HI_FALSE;
+
+	pstBlackLevel->au16BlackLevel[0] = 70;
+	pstBlackLevel->au16BlackLevel[1] = 70;
+	pstBlackLevel->au16BlackLevel[2] = 70;
+	pstBlackLevel->au16BlackLevel[3] = 70;
+
+	return 0;  
+
+}
+
+HI_VOID cmos_set_pixel_detect(HI_BOOL bEnable)
+{
+	HI_U32 u32Lines = VMAX_1080P30_LINEAR * 30 /5;
+
+#if CMOS_SC2135_ISP_WRITE_SENSOR_ENABLE
+	if (bEnable) /* setup for ISP pixel calibration mode */
+	{
+		/* 5 fps */
+		sensor_write_register(0x320e, (u32Lines >> 4) && 0xFF);
+		sensor_write_register(0x320f, ((u32Lines<<4)&&0xF0));
+
+		/* max exposure time*/
+
+
+	}
+	else /* setup for ISP 'normal mode' */
+	{ 
+		sensor_write_register(0x320e, (gu32FullLinesStd >> 8) && 0XFF);
+		sensor_write_register(0x320f, gu32FullLinesStd && 0xFF);
+
+		bInit = HI_FALSE;
+	}
+#else
+	if (bEnable) /* setup for ISP pixel calibration mode */
+	{
+
+		sensor_write_register(0x3e01, (u32Lines >> 8) && 0xFF);
+		sensor_write_register(0x3e02, (u32Lines - 4) && 0xFF);
+
+		/* min gain */
+		sensor_write_register(0x3e0e, 0x00);
+		sensor_write_register(0x3e0f, 0x00);
+
+		/* 5 fps */
+		sensor_write_register(0x320e, (u32Lines >> 8) && 0xFF);
+		sensor_write_register(0x320f, u32Lines && 0xFF);
+	}
+	else /* setup for ISP 'normal mode' */
+	{ 
+		sensor_write_register(0x320e, (gu32FullLinesStd >> 8) && 0XFF);
+		sensor_write_register(0x320f, gu32FullLinesStd && 0xFF);
+
+		bInit = HI_FALSE;
+	}
+#endif
+
+	return;
+}
+
+HI_VOID cmos_set_wdr_mode(HI_U8 u8Mode)
+{
+	bInit = HI_FALSE;
+
+	switch(u8Mode)
+	{
+		case WDR_MODE_NONE:
+			if (SENSOR_1080P_30FPS_MODE == gu8SensorImageMode)
+			{
+				gu32FullLinesStd = VMAX_1080P30_LINEAR;
+			}
+			genSensorMode = WDR_MODE_NONE;
+			printf("linear mode\n");
+			break;
+		default:
+			printf("NOT support this mode!\n");
+			return;
+			break;
+	}
+	return;
+}
+
+HI_U32 cmos_get_sns_regs_info(ISP_SNS_REGS_INFO_S *pstSnsRegsInfo)
+{
+
+#if CMOS_SC2135_ISP_WRITE_SENSOR_ENABLE
+
+	HI_S32 i;
+
+	if (HI_FALSE == bInit)
+	{
+		g_stSnsRegsInfo.enSnsType = ISP_SNS_I2C_TYPE;
+		g_stSnsRegsInfo.u8Cfg2ValidDelayMax = 2;		
+		g_stSnsRegsInfo.u32RegNum = 6;
+
+		for (i=0; i<g_stSnsRegsInfo.u32RegNum; i++)
+		{	
+			g_stSnsRegsInfo.astI2cData[i].bUpdate = HI_TRUE;
+			g_stSnsRegsInfo.astI2cData[i].u8DevAddr = sensor_i2c_addr;
+			g_stSnsRegsInfo.astI2cData[i].u32AddrByteNum = sensor_addr_byte;
+			g_stSnsRegsInfo.astI2cData[i].u32DataByteNum = sensor_data_byte;
+		}		
+		g_stSnsRegsInfo.astI2cData[0].u8DelayFrmNum = 1;
+		g_stSnsRegsInfo.astI2cData[0].u32RegAddr = 0x3e01;     //exp high  bit[7:0] 
+		g_stSnsRegsInfo.astI2cData[1].u8DelayFrmNum = 1;
+		g_stSnsRegsInfo.astI2cData[1].u32RegAddr = 0x3e02;     //exp low  bit[7:4] 
+		g_stSnsRegsInfo.astI2cData[2].u8DelayFrmNum = 1;
+		g_stSnsRegsInfo.astI2cData[2].u32RegAddr = 0x3e08;     //
+		g_stSnsRegsInfo.astI2cData[3].u8DelayFrmNum = 1;
+		g_stSnsRegsInfo.astI2cData[3].u32RegAddr = 0x3e09;     //
+
+		g_stSnsRegsInfo.astI2cData[4].u8DelayFrmNum = 0;
+		g_stSnsRegsInfo.astI2cData[4].u32RegAddr = 0x320e;     //TIMING_VTS  high bit[7:0] 
+		g_stSnsRegsInfo.astI2cData[5].u8DelayFrmNum = 0;
+		g_stSnsRegsInfo.astI2cData[5].u32RegAddr = 0x320f;     //TIMING_VTS  low bit[7:0] 
+
+		bInit = HI_TRUE;
+	}
+	else    
+	{        
+		for (i=0; i<g_stSnsRegsInfo.u32RegNum; i++)        
+		{            
+			if (g_stSnsRegsInfo.astI2cData[i].u32Data == g_stPreSnsRegsInfo.astI2cData[i].u32Data)            
+			{                
+				// printf("HI_FALSE....\n");
+				g_stSnsRegsInfo.astI2cData[i].bUpdate = HI_TRUE;
+			}            
+			else            
+			{
+				if(i == 0)
+				{
+					//printf("i:%d..g_stSnsRegsInfo:%#x  g_stPreSnsRegsInfo:%#x.....\n",i,g_stSnsRegsInfo.astI2cData[i].u32Data, g_stPreSnsRegsInfo.astI2cData[i].u32Data);
+					//printf("#####################HI_TRUE....\n");       
+				}
+				g_stSnsRegsInfo.astI2cData[i].bUpdate = HI_TRUE;
+			}        
+		}    
+	}
+
+	if (HI_NULL == pstSnsRegsInfo)
+	{
+		printf("null pointer when get sns reg info!\n");
+		return -1;
+	}
+
+	//printf(".%#X..%#X.\n",g_stSnsRegsInfo.astI2cData[0].u32Data,g_stPreSnsRegsInfo.astI2cData[0].u32Data);
+	memcpy(pstSnsRegsInfo, &g_stSnsRegsInfo, sizeof(ISP_SNS_REGS_INFO_S)); 
+	memcpy(&g_stPreSnsRegsInfo, &g_stSnsRegsInfo, sizeof(ISP_SNS_REGS_INFO_S)); 
+#endif
+	return 0;
+}
+
+static HI_S32 cmos_set_image_mode(ISP_CMOS_SENSOR_IMAGE_MODE_S *pstSensorImageMode)
+{
+	HI_U8 u8SensorImageMode = gu8SensorImageMode;
+
+	bInit = HI_FALSE;
+
+	if (HI_NULL == pstSensorImageMode )
+	{
+		printf("null pointer when set image mode\n");
+		return -1;
+	}
+
+	if ((pstSensorImageMode->u16Width <= 1920) && (pstSensorImageMode->u16Height <= 1080))
+	{
+		if (WDR_MODE_NONE == genSensorMode)
+		{
+			if (pstSensorImageMode->f32Fps <= 30)
+			{
+				u8SensorImageMode = SENSOR_1080P_30FPS_MODE;
+			}
+			else
+			{
+				printf("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n", 
+						pstSensorImageMode->u16Width, 
+						pstSensorImageMode->u16Height,
+						pstSensorImageMode->f32Fps,
+						genSensorMode);
+
+				return -1;
+			}
+		}
+		else
+		{
+			printf("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n", 
+					pstSensorImageMode->u16Width, 
+					pstSensorImageMode->u16Height,
+					pstSensorImageMode->f32Fps,
+					genSensorMode);
+
+			return -1;
+		}
+	}
+	else
+	{
+		printf("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n", 
+				pstSensorImageMode->u16Width, 
+				pstSensorImageMode->u16Height,
+				pstSensorImageMode->f32Fps,
+				genSensorMode);
+
+		return -1;
+	}
+
+	/* Sensor first init */
+	if (HI_FALSE == bSensorInit)
+	{
+		gu8SensorImageMode = u8SensorImageMode;
+
+		return 0;
+	}
+
+	/* Switch SensorImageMode */
+	if (u8SensorImageMode == gu8SensorImageMode)
+	{
+		/* Don't need to switch SensorImageMode */
+		return -1;
+	}
+
+	gu8SensorImageMode = u8SensorImageMode;
+	printf("%s.............................%d....\n",__FUNCTION__,__LINE__);   
+
+	return 0;
+}
+
+HI_VOID sensor_global_init()
+{   
+	gu8SensorImageMode = SENSOR_1080P_30FPS_MODE;
+	genSensorMode = WDR_MODE_NONE;
+	gu32FullLinesStd = VMAX_1080P30_LINEAR; 
+	gu32FullLines = VMAX_1080P30_LINEAR;
+	bInit = HI_FALSE;
+	bSensorInit = HI_FALSE; 
+
+	memset(&g_stSnsRegsInfo, 0, sizeof(ISP_SNS_REGS_INFO_S));
+	memset(&g_stPreSnsRegsInfo, 0, sizeof(ISP_SNS_REGS_INFO_S));
+}
+
+HI_S32 cmos_init_sensor_exp_function(ISP_SENSOR_EXP_FUNC_S *pstSensorExpFunc)
+{
+	memset(pstSensorExpFunc, 0, sizeof(ISP_SENSOR_EXP_FUNC_S));
+
+	pstSensorExpFunc->pfn_cmos_sensor_init = sensor_init;
+	pstSensorExpFunc->pfn_cmos_sensor_exit = sensor_exit;
+	pstSensorExpFunc->pfn_cmos_sensor_global_init = sensor_global_init;
+	pstSensorExpFunc->pfn_cmos_set_image_mode = cmos_set_image_mode;
+	pstSensorExpFunc->pfn_cmos_set_wdr_mode = cmos_set_wdr_mode;
+
+	pstSensorExpFunc->pfn_cmos_get_isp_default = cmos_get_isp_default;
+	pstSensorExpFunc->pfn_cmos_get_isp_black_level = cmos_get_isp_black_level;
+	pstSensorExpFunc->pfn_cmos_set_pixel_detect = cmos_set_pixel_detect;
+	pstSensorExpFunc->pfn_cmos_get_sns_reg_info = cmos_get_sns_regs_info;
+
+	return 0;
+}
+
+/****************************************************************************
+ * callback structure                                                       *
+ ****************************************************************************/
+
+int sensor_register_callback(void)
+{
+	ISP_DEV IspDev = 0;
+	HI_S32 s32Ret;
+	ALG_LIB_S stLib;
+	ISP_SENSOR_REGISTER_S stIspRegister;
+	AE_SENSOR_REGISTER_S  stAeRegister;
+	AWB_SENSOR_REGISTER_S stAwbRegister;
+
+	cmos_init_sensor_exp_function(&stIspRegister.stSnsExp);
+	s32Ret = HI_MPI_ISP_SensorRegCallBack(IspDev, SC2135_ID, &stIspRegister);
+	if (s32Ret)
+	{
+		printf("sensor register callback function failed!\n");
+		return s32Ret;
+	}
+
+	stLib.s32Id = 0;
+	strncpy(stLib.acLibName, HI_AE_LIB_NAME, sizeof(HI_AE_LIB_NAME));
+	cmos_init_ae_exp_function(&stAeRegister.stSnsExp);
+	s32Ret = HI_MPI_AE_SensorRegCallBack(IspDev, &stLib, SC2135_ID, &stAeRegister);
+	if (s32Ret)
+	{
+		printf("sensor register callback function to ae lib failed!\n");
+		return s32Ret;
+	}
+
+	stLib.s32Id = 0;
+	strncpy(stLib.acLibName, HI_AWB_LIB_NAME, sizeof(HI_AWB_LIB_NAME));
+	cmos_init_awb_exp_function(&stAwbRegister.stSnsExp);
+	s32Ret = HI_MPI_AWB_SensorRegCallBack(IspDev, &stLib, SC2135_ID, &stAwbRegister);
+	if (s32Ret)
+	{
+		printf("sensor register callback function to ae lib failed!\n");
+		return s32Ret;
+	}
+
+	return 0;
+}
+
+int sensor_unregister_callback(void)
+{
+	ISP_DEV IspDev = 0;
+	HI_S32 s32Ret;
+	ALG_LIB_S stLib;
+
+	s32Ret = HI_MPI_ISP_SensorUnRegCallBack(IspDev, SC2135_ID);
+	if (s32Ret)
+	{
+		printf("sensor unregister callback function failed!\n");
+		return s32Ret;
+	}
+
+	stLib.s32Id = 0;
+	strncpy(stLib.acLibName, HI_AE_LIB_NAME, sizeof(HI_AE_LIB_NAME));
+	s32Ret = HI_MPI_AE_SensorUnRegCallBack(IspDev, &stLib, SC2135_ID);
+	if (s32Ret)
+	{
+		printf("sensor unregister callback function to ae lib failed!\n");
+		return s32Ret;
+	}
+
+	stLib.s32Id = 0;
+	strncpy(stLib.acLibName, HI_AWB_LIB_NAME, sizeof(HI_AWB_LIB_NAME));
+	s32Ret = HI_MPI_AWB_SensorUnRegCallBack(IspDev, &stLib, SC2135_ID);
+	if (s32Ret)
+	{
+		printf("sensor unregister callback function to ae lib failed!\n");
+		return s32Ret;
+	}
+
+	return 0;
+}
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#endif /* __SC2135_CMOS_H_ */
diff -uNr a/component/isp/sensor/smartsens_sc2135/sc2135_sensor_ctl.c b/component/isp/sensor/smartsens_sc2135/sc2135_sensor_ctl.c
--- a/component/isp/sensor/smartsens_sc2135/sc2135_sensor_ctl.c	1970-01-01 08:00:00.000000000 +0800
+++ b/component/isp/sensor/smartsens_sc2135/sc2135_sensor_ctl.c	2016-09-08 00:13:37.126441238 +0800
@@ -0,0 +1,344 @@
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/ioctl.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#include "hi_comm_video.h"
+
+#ifdef HI_GPIO_I2C
+#include "gpioi2c_ex.h"
+#else
+#include "hi_i2c.h"
+#endif
+
+const unsigned char sensor_i2c_addr	    =	0x60;		/* I2C Address of SC2135 */
+const unsigned int  sensor_addr_byte	=	2;
+const unsigned int  sensor_data_byte	=	1;
+static int g_fd = -1;
+static int flag_init = 0;
+
+extern WDR_MODE_E genSensorMode;
+extern HI_U8 gu8SensorImageMode;
+extern HI_BOOL bSensorInit;
+
+int sensor_i2c_init(void)
+{
+	if(g_fd >= 0)
+	{
+		return 0;
+	}    
+#ifdef HI_GPIO_I2C
+	int ret;
+
+	g_fd = open("/dev/gpioi2c_ex", 0);
+	if(g_fd < 0)
+	{
+		printf("Open gpioi2c_ex error!\n");
+		return -1;
+	}
+#else
+	int ret;
+
+	g_fd = open("/dev/i2c-0", O_RDWR);
+	if(g_fd < 0)
+	{
+		printf("Open /dev/i2c-0 error!\n");
+		return -1;
+	}
+
+	ret = ioctl(g_fd, I2C_SLAVE_FORCE, sensor_i2c_addr);
+	if (ret < 0)
+	{
+		printf("CMD_SET_DEV error!\n");
+		return ret;
+	}
+#endif
+
+	return 0;
+}
+
+int sensor_i2c_exit(void)
+{
+	if (g_fd >= 0)
+	{
+		close(g_fd);
+		g_fd = -1;
+		return 0;
+	}
+	return -1;
+}
+
+int sensor_read_register(int addr)
+
+{    
+	int idx = 0;
+	int ret = 0, data = 0;
+	char buf[8] = {0};
+	buf[idx++] = addr & 0xFF;
+
+	if (sensor_addr_byte == 2)
+	{
+		ret = ioctl(g_fd, I2C_16BIT_REG, 1);
+		buf[idx++] = (addr >> 8);
+	}
+	else
+	{
+		ret = ioctl(g_fd, I2C_16BIT_REG, 0);
+	}
+	if (ret < 0)
+	{
+		printf("CMD_SET_REG_WIDTH error!\n");
+		return -1;
+	}
+
+	buf[idx++] = data;
+	if (sensor_data_byte == 2)
+	{
+		ret = ioctl(g_fd, I2C_16BIT_DATA, 1);
+		buf[idx++] = data >> 8;
+	}
+	else
+	{
+		ret = ioctl(g_fd, I2C_16BIT_DATA, 0);
+	}
+	if (ret)
+	{
+		printf("hi_i2c write faild!\n");
+		return -1;
+	}
+	ret = read(g_fd, buf, idx);
+
+	return buf[0];
+}
+
+int sensor_write_register(int addr, int data)
+{
+#ifdef HI_GPIO_I2C
+	i2c_data.dev_addr = sensor_i2c_addr;
+	i2c_data.reg_addr = addr;
+	i2c_data.addr_byte_num = sensor_addr_byte;
+	i2c_data.data = data;
+	i2c_data.data_byte_num = sensor_data_byte;
+
+	ret = ioctl(g_fd, GPIO_I2C_WRITE, &i2c_data);
+
+	if (ret)
+	{
+		printf("GPIO-I2C write faild!\n");
+		return ret;
+	}
+#else
+	if(flag_init == 0)
+	{
+
+		sensor_i2c_init();
+		flag_init = 1;
+	}
+
+	int idx = 0;
+	int ret;
+	char buf[8];
+
+	buf[idx++] = addr & 0xFF;
+	if (sensor_addr_byte == 2)
+	{
+		ret = ioctl(g_fd, I2C_16BIT_REG, 1);
+		buf[idx++] = addr >> 8;
+	}
+	else
+	{
+		ret = ioctl(g_fd, I2C_16BIT_REG, 0);
+	}
+
+	if (ret < 0)
+	{
+		printf("CMD_SET_REG_WIDTH error!\n");
+		return -1;
+	}
+
+	buf[idx++] = data;
+	if (sensor_data_byte == 2)
+	{
+		ret = ioctl(g_fd, I2C_16BIT_DATA, 1);
+		buf[idx++] = data >> 8;
+	}
+	else
+	{
+		ret = ioctl(g_fd, I2C_16BIT_DATA, 0);
+	}
+
+	if (ret)
+	{
+		printf("hi_i2c write faild!\n");
+		return -1;
+	}
+
+	ret = write(g_fd, buf, idx);
+	if(ret < 0)
+	{
+		printf("I2C_WRITE error!\n");
+		return -1;
+	}
+
+	//printf("%#x, %#x, \n",data,sensor_read_register(addr));
+#endif
+	return 0;
+}
+
+static void delay_ms(int ms) { 
+	usleep(ms*1000);
+}
+
+void sensor_prog(int* rom) 
+{
+	int i = 0;
+	while (1) {
+		int lookup = rom[i++];
+		int addr = (lookup >> 16) & 0xFFFF;
+		int data = lookup & 0xFFFF;
+		if (addr == 0xFFFE) {
+			delay_ms(data);
+		} else if (addr == 0xFFFF) {
+			return;
+		} else {
+			sensor_write_register(addr, data);
+		}
+	}
+}
+
+void sensor_linear_1080p30_init();
+
+#define SENSOR_1080P_30FPS_MODE  (1)
+
+void sensor_init()
+{
+	sensor_i2c_init();
+#if 0
+	/* When sensor first init, config all registers */
+	if (HI_FALSE == bSensorInit) 
+	{
+		if(SENSOR_720P_25FPS_MODE == gu8SensorImageMode)
+		{
+			sensor_linear_720p25_init();
+		}
+	}
+	/* When sensor switch mode(linear<->WDR or resolution), config different registers(if possible) */
+	else 
+	{
+		if(SENSOR_720P_25FPS_MODE == gu8SensorImageMode)
+		{
+			sensor_linear_720p25_init();
+		}
+	}
+#endif
+	sensor_linear_1080p30_init();
+
+	return ;
+}
+
+void sensor_exit()
+{
+	sensor_i2c_exit();
+	flag_init = 0;
+	return;
+}
+
+void sensor_linear_1080p30_init()
+{
+	//SC2135_27Minput_67.5MPclk_1080p_30fps_20160613
+	sensor_write_register(0x0103,0x01);  // reset all regist
+	sensor_write_register(0x0100,0x00);  // stream output ho
+
+	sensor_write_register(0x3e03,0x03);  //AE AG setting	
+	sensor_write_register(0x3e01,0x46); 					
+	sensor_write_register(0x3e08,0x00); 					
+	sensor_write_register(0x3e09,0x10); 					
+	sensor_write_register(0x3416,0x11); 					
+
+	sensor_write_register(0x3300,0x20);  //sampling timing	
+	sensor_write_register(0x3301,0x08); 					
+	sensor_write_register(0x3303,0x30); 					
+	sensor_write_register(0x3306,0x78); //0524				
+	sensor_write_register(0x330b,0xd0); 					
+	sensor_write_register(0x3309,0x30); 					
+	sensor_write_register(0x3308,0x0a); 					
+	sensor_write_register(0x331e,0x26); 					
+	sensor_write_register(0x331f,0x26); 					
+	sensor_write_register(0x3320,0x2c); 					
+	sensor_write_register(0x3321,0x2c); 					
+	sensor_write_register(0x3322,0x2c); 					
+	sensor_write_register(0x3323,0x2c); 					
+	sensor_write_register(0x330e,0x20); 					
+	sensor_write_register(0x3f05,0xdf);  // mem write		
+	sensor_write_register(0x3f01,0x04);  //sram write inv	
+	sensor_write_register(0x3626,0x04); 					
+
+	sensor_write_register(0x3312,0x06);  //sa1 timing		
+	sensor_write_register(0x3340,0x03); 					
+	sensor_write_register(0x3341,0x68); 					
+	sensor_write_register(0x3342,0x02); 					
+	sensor_write_register(0x3343,0x20);
+
+	sensor_write_register(0x3333,0x10); 					
+	sensor_write_register(0x3334,0x20); 					
+
+	sensor_write_register(0x3621,0x18); //mem timing setting
+	sensor_write_register(0x3626,0x04); //reduce non-overlap
+
+	sensor_write_register(0x3635,0x34); //analog config 	
+	sensor_write_register(0x3038,0xa4); 					
+	sensor_write_register(0x3630,0x84); //blksun  0xcc		
+	sensor_write_register(0x3622,0x0e); 					
+	sensor_write_register(0x3620,0x62); 					
+	sensor_write_register(0x3627,0x08); 
+
+	sensor_write_register(0x3637,0x87); //ramp config		
+	sensor_write_register(0x3638,0x86); 					
+	sensor_write_register(0x3034,0xd2); //decrease counter c
+
+	sensor_write_register(0x5780,0xff); //DPC manual mode	
+	sensor_write_register(0x5781,0x0c); 					
+	sensor_write_register(0x5785,0x10); 
+
+	sensor_write_register(0x3d08,0x00); //PCLK inversion	
+	sensor_write_register(0x3640,0x00); //pad driving abilit
+
+	sensor_write_register(0x320c,0x03); //30fps config		
+	sensor_write_register(0x320d,0xe8); 
+
+	sensor_write_register(0x3340,0x03); //barlow denoise		
+	sensor_write_register(0x3341,0x68); 
+
+	sensor_write_register(0x3662,0x82); //close temperature 
+	sensor_write_register(0x335d,0x00); //close precharge au
+	sensor_write_register(0x4501,0xa4); //close bitwidth aut
+
+	sensor_write_register(0x3333,0x00); 					
+	sensor_write_register(0x3627,0x02); 					
+	sensor_write_register(0x3620,0x62); //0x62 gain<2		
+	sensor_write_register(0x5781,0x04);
+
+	sensor_write_register(0x3333,0x10); 					
+	sensor_write_register(0x3306,0x69); 					
+	sensor_write_register(0x3635,0x52); 					
+	sensor_write_register(0x3636,0x7c); 					
+	sensor_write_register(0x3631,0x84); 					
+	sensor_write_register(0x330b,0xe0); 																		
+
+	sensor_write_register(0x3637,0x88); 					
+	sensor_write_register(0x3306,0x6b); 					
+	sensor_write_register(0x330b,0xd0); 					
+	sensor_write_register(0x3630,0x84); 
+
+	sensor_write_register(0x0100,0x01); //stream output on	
+
+	bSensorInit = HI_TRUE;
+	printf("=========================================================\n");
+	printf("==sc2135 sensor 1080P30fps(Parallel port) init success!==\n");
+	printf("=========================================================\n");
+
+	return;
+}
+
